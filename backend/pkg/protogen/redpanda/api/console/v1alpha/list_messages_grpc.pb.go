// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: redpanda/api/console/v1alpha/list_messages.proto

package consolev1alpha

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsoleService_ListMessages_FullMethodName = "/redpanda.api.console.v1alpha.ConsoleService/ListMessages"
)

// ConsoleServiceClient is the client API for ConsoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsoleServiceClient interface {
	// ListMessages lists the messages according to the requested query.
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (ConsoleService_ListMessagesClient, error)
}

type consoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsoleServiceClient(cc grpc.ClientConnInterface) ConsoleServiceClient {
	return &consoleServiceClient{cc}
}

func (c *consoleServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (ConsoleService_ListMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConsoleService_ServiceDesc.Streams[0], ConsoleService_ListMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &consoleServiceListMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConsoleService_ListMessagesClient interface {
	Recv() (*ListMessagesResponse, error)
	grpc.ClientStream
}

type consoleServiceListMessagesClient struct {
	grpc.ClientStream
}

func (x *consoleServiceListMessagesClient) Recv() (*ListMessagesResponse, error) {
	m := new(ListMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsoleServiceServer is the server API for ConsoleService service.
// All implementations must embed UnimplementedConsoleServiceServer
// for forward compatibility
type ConsoleServiceServer interface {
	// ListMessages lists the messages according to the requested query.
	ListMessages(*ListMessagesRequest, ConsoleService_ListMessagesServer) error
	mustEmbedUnimplementedConsoleServiceServer()
}

// UnimplementedConsoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsoleServiceServer struct {
}

func (UnimplementedConsoleServiceServer) ListMessages(*ListMessagesRequest, ConsoleService_ListMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedConsoleServiceServer) mustEmbedUnimplementedConsoleServiceServer() {}

// UnsafeConsoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsoleServiceServer will
// result in compilation errors.
type UnsafeConsoleServiceServer interface {
	mustEmbedUnimplementedConsoleServiceServer()
}

func RegisterConsoleServiceServer(s grpc.ServiceRegistrar, srv ConsoleServiceServer) {
	s.RegisterService(&ConsoleService_ServiceDesc, srv)
}

func _ConsoleService_ListMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsoleServiceServer).ListMessages(m, &consoleServiceListMessagesServer{stream})
}

type ConsoleService_ListMessagesServer interface {
	Send(*ListMessagesResponse) error
	grpc.ServerStream
}

type consoleServiceListMessagesServer struct {
	grpc.ServerStream
}

func (x *consoleServiceListMessagesServer) Send(m *ListMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ConsoleService_ServiceDesc is the grpc.ServiceDesc for ConsoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.console.v1alpha.ConsoleService",
	HandlerType: (*ConsoleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMessages",
			Handler:       _ConsoleService_ListMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "redpanda/api/console/v1alpha/list_messages.proto",
}
