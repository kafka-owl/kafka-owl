// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/rp_connect.proto

package consolev1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RedpandaConnectServiceName is the fully-qualified name of the RedpandaConnectService service.
	RedpandaConnectServiceName = "redpanda.api.console.v1alpha1.RedpandaConnectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RedpandaConnectServiceListConnectPipelinesProcedure is the fully-qualified name of the
	// RedpandaConnectService's ListConnectPipelines RPC.
	RedpandaConnectServiceListConnectPipelinesProcedure = "/redpanda.api.console.v1alpha1.RedpandaConnectService/ListConnectPipelines"
	// RedpandaConnectServiceGetConnectPipelineProcedure is the fully-qualified name of the
	// RedpandaConnectService's GetConnectPipeline RPC.
	RedpandaConnectServiceGetConnectPipelineProcedure = "/redpanda.api.console.v1alpha1.RedpandaConnectService/GetConnectPipeline"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	redpandaConnectServiceServiceDescriptor                    = v1alpha1.File_redpanda_api_console_v1alpha1_rp_connect_proto.Services().ByName("RedpandaConnectService")
	redpandaConnectServiceListConnectPipelinesMethodDescriptor = redpandaConnectServiceServiceDescriptor.Methods().ByName("ListConnectPipelines")
	redpandaConnectServiceGetConnectPipelineMethodDescriptor   = redpandaConnectServiceServiceDescriptor.Methods().ByName("GetConnectPipeline")
)

// RedpandaConnectServiceClient is a client for the
// redpanda.api.console.v1alpha1.RedpandaConnectService service.
type RedpandaConnectServiceClient interface {
	// ListConnectPipelines lists all the connect pipelines based on optional filter.
	ListConnectPipelines(context.Context, *connect.Request[v1alpha1.ListConnectPipelinesRequest]) (*connect.Response[v1alpha1.ListConnectPipelinesResponse], error)
	// GetConnectPipeline retrieves exactly one pipeline by its name.
	GetConnectPipeline(context.Context, *connect.Request[v1alpha1.GetConnectPipelineRequest]) (*connect.Response[v1alpha1.GetConnectPipelineResponse], error)
}

// NewRedpandaConnectServiceClient constructs a client for the
// redpanda.api.console.v1alpha1.RedpandaConnectService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRedpandaConnectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RedpandaConnectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &redpandaConnectServiceClient{
		listConnectPipelines: connect.NewClient[v1alpha1.ListConnectPipelinesRequest, v1alpha1.ListConnectPipelinesResponse](
			httpClient,
			baseURL+RedpandaConnectServiceListConnectPipelinesProcedure,
			connect.WithSchema(redpandaConnectServiceListConnectPipelinesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getConnectPipeline: connect.NewClient[v1alpha1.GetConnectPipelineRequest, v1alpha1.GetConnectPipelineResponse](
			httpClient,
			baseURL+RedpandaConnectServiceGetConnectPipelineProcedure,
			connect.WithSchema(redpandaConnectServiceGetConnectPipelineMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// redpandaConnectServiceClient implements RedpandaConnectServiceClient.
type redpandaConnectServiceClient struct {
	listConnectPipelines *connect.Client[v1alpha1.ListConnectPipelinesRequest, v1alpha1.ListConnectPipelinesResponse]
	getConnectPipeline   *connect.Client[v1alpha1.GetConnectPipelineRequest, v1alpha1.GetConnectPipelineResponse]
}

// ListConnectPipelines calls
// redpanda.api.console.v1alpha1.RedpandaConnectService.ListConnectPipelines.
func (c *redpandaConnectServiceClient) ListConnectPipelines(ctx context.Context, req *connect.Request[v1alpha1.ListConnectPipelinesRequest]) (*connect.Response[v1alpha1.ListConnectPipelinesResponse], error) {
	return c.listConnectPipelines.CallUnary(ctx, req)
}

// GetConnectPipeline calls redpanda.api.console.v1alpha1.RedpandaConnectService.GetConnectPipeline.
func (c *redpandaConnectServiceClient) GetConnectPipeline(ctx context.Context, req *connect.Request[v1alpha1.GetConnectPipelineRequest]) (*connect.Response[v1alpha1.GetConnectPipelineResponse], error) {
	return c.getConnectPipeline.CallUnary(ctx, req)
}

// RedpandaConnectServiceHandler is an implementation of the
// redpanda.api.console.v1alpha1.RedpandaConnectService service.
type RedpandaConnectServiceHandler interface {
	// ListConnectPipelines lists all the connect pipelines based on optional filter.
	ListConnectPipelines(context.Context, *connect.Request[v1alpha1.ListConnectPipelinesRequest]) (*connect.Response[v1alpha1.ListConnectPipelinesResponse], error)
	// GetConnectPipeline retrieves exactly one pipeline by its name.
	GetConnectPipeline(context.Context, *connect.Request[v1alpha1.GetConnectPipelineRequest]) (*connect.Response[v1alpha1.GetConnectPipelineResponse], error)
}

// NewRedpandaConnectServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRedpandaConnectServiceHandler(svc RedpandaConnectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	redpandaConnectServiceListConnectPipelinesHandler := connect.NewUnaryHandler(
		RedpandaConnectServiceListConnectPipelinesProcedure,
		svc.ListConnectPipelines,
		connect.WithSchema(redpandaConnectServiceListConnectPipelinesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	redpandaConnectServiceGetConnectPipelineHandler := connect.NewUnaryHandler(
		RedpandaConnectServiceGetConnectPipelineProcedure,
		svc.GetConnectPipeline,
		connect.WithSchema(redpandaConnectServiceGetConnectPipelineMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/redpanda.api.console.v1alpha1.RedpandaConnectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RedpandaConnectServiceListConnectPipelinesProcedure:
			redpandaConnectServiceListConnectPipelinesHandler.ServeHTTP(w, r)
		case RedpandaConnectServiceGetConnectPipelineProcedure:
			redpandaConnectServiceGetConnectPipelineHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRedpandaConnectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRedpandaConnectServiceHandler struct{}

func (UnimplementedRedpandaConnectServiceHandler) ListConnectPipelines(context.Context, *connect.Request[v1alpha1.ListConnectPipelinesRequest]) (*connect.Response[v1alpha1.ListConnectPipelinesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.RedpandaConnectService.ListConnectPipelines is not implemented"))
}

func (UnimplementedRedpandaConnectServiceHandler) GetConnectPipeline(context.Context, *connect.Request[v1alpha1.GetConnectPipelineRequest]) (*connect.Response[v1alpha1.GetConnectPipelineResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.console.v1alpha1.RedpandaConnectService.GetConnectPipeline is not implemented"))
}
