// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/console/v1alpha1/rp_connect.proto

package consolev1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/console/v1alpha1"
)

// RedpandaConnectServiceGatewayServer implements the gRPC server API for the RedpandaConnectService
// service.
type RedpandaConnectServiceGatewayServer struct {
	v1alpha1.UnimplementedRedpandaConnectServiceServer
	listConnectPipelines connect_gateway.UnaryHandler[v1alpha1.ListConnectPipelinesRequest, v1alpha1.ListConnectPipelinesResponse]
	getConnectPipeline   connect_gateway.UnaryHandler[v1alpha1.GetConnectPipelineRequest, v1alpha1.GetConnectPipelineResponse]
}

// NewRedpandaConnectServiceGatewayServer constructs a Connect-Gateway gRPC server for the
// RedpandaConnectService service.
func NewRedpandaConnectServiceGatewayServer(svc RedpandaConnectServiceHandler, opts ...connect_gateway.HandlerOption) *RedpandaConnectServiceGatewayServer {
	return &RedpandaConnectServiceGatewayServer{
		listConnectPipelines: connect_gateway.NewUnaryHandler(RedpandaConnectServiceListConnectPipelinesProcedure, svc.ListConnectPipelines, opts...),
		getConnectPipeline:   connect_gateway.NewUnaryHandler(RedpandaConnectServiceGetConnectPipelineProcedure, svc.GetConnectPipeline, opts...),
	}
}

func (s *RedpandaConnectServiceGatewayServer) ListConnectPipelines(ctx context.Context, req *v1alpha1.ListConnectPipelinesRequest) (*v1alpha1.ListConnectPipelinesResponse, error) {
	return s.listConnectPipelines(ctx, req)
}

func (s *RedpandaConnectServiceGatewayServer) GetConnectPipeline(ctx context.Context, req *v1alpha1.GetConnectPipelineRequest) (*v1alpha1.GetConnectPipelineResponse, error) {
	return s.getConnectPipeline(ctx, req)
}

// RegisterRedpandaConnectServiceHandlerGatewayServer registers the Connect handlers for the
// RedpandaConnectService "svc" to "mux".
func RegisterRedpandaConnectServiceHandlerGatewayServer(mux *runtime.ServeMux, svc RedpandaConnectServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterRedpandaConnectServiceHandlerServer(context.TODO(), mux, NewRedpandaConnectServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
