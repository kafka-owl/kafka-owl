// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: redpanda/api/console/v1alpha1/debug_bundle.proto

package consolev1alpha1

import (
	reflect "reflect"
	sync "sync"

	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Error code enum.
type BundleErrorCode int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	// OK. No Error.
	BundleErrorCode_BUNDLE_ERROR_CODE_OK BundleErrorCode = 0
	// Debug bundle process already running
	BundleErrorCode_BUNDLE_ERROR_CODE_PROCESS_ALREADY_RUNNING BundleErrorCode = 1
	// Debug bundle process not running.
	BundleErrorCode_BUNDLE_ERROR_CODE_PROCESS_NOT_RUNNING BundleErrorCode = 2
	// Job ID not recognized.
	BundleErrorCode_BUNDLE_ERROR_CODE_INVALID_JOB_ID BundleErrorCode = 3
	// Debug bundle process was never started.
	BundleErrorCode_BUNDLE_ERROR_CODE_PROCESS_NOT_STARTED BundleErrorCode = 4
	// Internal error.
	BundleErrorCode_BUNDLE_ERROR_CODE_INTERNAL_ERROR BundleErrorCode = 5
)

// Enum value maps for BundleErrorCode.
var (
	BundleErrorCode_name = map[int32]string{
		0: "BUNDLE_ERROR_CODE_OK",
		1: "BUNDLE_ERROR_CODE_PROCESS_ALREADY_RUNNING",
		2: "BUNDLE_ERROR_CODE_PROCESS_NOT_RUNNING",
		3: "BUNDLE_ERROR_CODE_INVALID_JOB_ID",
		4: "BUNDLE_ERROR_CODE_PROCESS_NOT_STARTED",
		5: "BUNDLE_ERROR_CODE_INTERNAL_ERROR",
	}
	BundleErrorCode_value = map[string]int32{
		"BUNDLE_ERROR_CODE_OK":                      0,
		"BUNDLE_ERROR_CODE_PROCESS_ALREADY_RUNNING": 1,
		"BUNDLE_ERROR_CODE_PROCESS_NOT_RUNNING":     2,
		"BUNDLE_ERROR_CODE_INVALID_JOB_ID":          3,
		"BUNDLE_ERROR_CODE_PROCESS_NOT_STARTED":     4,
		"BUNDLE_ERROR_CODE_INTERNAL_ERROR":          5,
	}
)

func (x BundleErrorCode) Enum() *BundleErrorCode {
	p := new(BundleErrorCode)
	*p = x
	return p
}

func (x BundleErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BundleErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[0].Descriptor()
}

func (BundleErrorCode) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[0]
}

func (x BundleErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BundleErrorCode.Descriptor instead.
func (BundleErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{0}
}

type SCRAMAuth_Mechanism int32

const (
	SCRAMAuth_MECHANISM_UNSPECIFIED   SCRAMAuth_Mechanism = 0
	SCRAMAuth_MECHANISM_SCRAM_SHA_256 SCRAMAuth_Mechanism = 1
	SCRAMAuth_MECHANISM_SCRAM_SHA_512 SCRAMAuth_Mechanism = 2
)

// Enum value maps for SCRAMAuth_Mechanism.
var (
	SCRAMAuth_Mechanism_name = map[int32]string{
		0: "MECHANISM_UNSPECIFIED",
		1: "MECHANISM_SCRAM_SHA_256",
		2: "MECHANISM_SCRAM_SHA_512",
	}
	SCRAMAuth_Mechanism_value = map[string]int32{
		"MECHANISM_UNSPECIFIED":   0,
		"MECHANISM_SCRAM_SHA_256": 1,
		"MECHANISM_SCRAM_SHA_512": 2,
	}
)

func (x SCRAMAuth_Mechanism) Enum() *SCRAMAuth_Mechanism {
	p := new(SCRAMAuth_Mechanism)
	*p = x
	return p
}

func (x SCRAMAuth_Mechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SCRAMAuth_Mechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[1].Descriptor()
}

func (SCRAMAuth_Mechanism) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[1]
}

func (x SCRAMAuth_Mechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SCRAMAuth_Mechanism.Descriptor instead.
func (SCRAMAuth_Mechanism) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{0, 0}
}

type DebugBundleStatus_Status int32

const (
	DebugBundleStatus_STATUS_UNSPECIFIED DebugBundleStatus_Status = 0
	DebugBundleStatus_STATUS_RUNNING     DebugBundleStatus_Status = 1
	DebugBundleStatus_STATUS_SUCCESS     DebugBundleStatus_Status = 2
	DebugBundleStatus_STATUS_ERROR       DebugBundleStatus_Status = 3
)

// Enum value maps for DebugBundleStatus_Status.
var (
	DebugBundleStatus_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_RUNNING",
		2: "STATUS_SUCCESS",
		3: "STATUS_ERROR",
	}
	DebugBundleStatus_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_RUNNING":     1,
		"STATUS_SUCCESS":     2,
		"STATUS_ERROR":       3,
	}
)

func (x DebugBundleStatus_Status) Enum() *DebugBundleStatus_Status {
	p := new(DebugBundleStatus_Status)
	*p = x
	return p
}

func (x DebugBundleStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugBundleStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[2].Descriptor()
}

func (DebugBundleStatus_Status) Type() protoreflect.EnumType {
	return &file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes[2]
}

func (x DebugBundleStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugBundleStatus_Status.Descriptor instead.
func (DebugBundleStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{4, 0}
}

// SCRAM Auth settings.
type SCRAMAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string              `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password  string              `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Mechanism SCRAMAuth_Mechanism `protobuf:"varint,3,opt,name=mechanism,proto3,enum=redpanda.api.console.v1alpha1.SCRAMAuth_Mechanism" json:"mechanism,omitempty"`
}

func (x *SCRAMAuth) Reset() {
	*x = SCRAMAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCRAMAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCRAMAuth) ProtoMessage() {}

func (x *SCRAMAuth) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCRAMAuth.ProtoReflect.Descriptor instead.
func (*SCRAMAuth) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{0}
}

func (x *SCRAMAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SCRAMAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SCRAMAuth) GetMechanism() SCRAMAuth_Mechanism {
	if x != nil {
		return x.Mechanism
	}
	return SCRAMAuth_MECHANISM_UNSPECIFIED
}

// Request to start the creation of debug bundle process with given configuration parameters.
type CreateDebugBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional authentication settings to use for the request.
	//
	// Types that are assignable to Authentication:
	//
	//	*CreateDebugBundleRequest_Scram
	Authentication isCreateDebugBundleRequest_Authentication `protobuf_oneof:"authentication"`
	// Optional broker IDs. Do not set / leave empty to create for all.
	BrokerIds []int32 `protobuf:"varint,3,rep,packed,name=broker_ids,json=brokerIds,proto3" json:"broker_ids,omitempty"`
	// The size limit of the controller logs that can be stored in the bundle.
	ControllerLogsSizeLimitBytes int32 `protobuf:"varint,4,opt,name=controller_logs_size_limit_bytes,json=controllerLogsSizeLimitBytes,proto3" json:"controller_logs_size_limit_bytes,omitempty"`
	// For how long to collect samples for the CPU profiler
	CpuProfilerWaitSeconds int32 `protobuf:"varint,5,opt,name=cpu_profiler_wait_seconds,json=cpuProfilerWaitSeconds,proto3" json:"cpu_profiler_wait_seconds,omitempty"`
	// Include logs dated from specified date onward.
	LogsSince *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=logs_since,json=logsSince,proto3" json:"logs_since,omitempty"`
	// Read the logs until the given size is reached.
	LogsSizeLimitBytes int32 `protobuf:"varint,7,opt,name=logs_size_limit_bytes,json=logsSizeLimitBytes,proto3" json:"logs_size_limit_bytes,omitempty"`
	// Include logs older than the specified date.
	LogsUntil *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=logs_until,json=logsUntil,proto3" json:"logs_until,omitempty"`
	// Interval between metrics snapshots.
	MetricsIntervalSeconds int32 `protobuf:"varint,9,opt,name=metrics_interval_seconds,json=metricsIntervalSeconds,proto3" json:"metrics_interval_seconds,omitempty"`
	// Partitions. When provided, rpk saves extra admin API requests for those partitions.
	// Optional.
	// In format {namespace/}topic/{partition ids} where namespace is optional and will be replaced with "kafka" if not provided.
	// Partition IDs is comma separated numbers.
	// kafka/foo/1,2,3. also there can be multiple of those so
	// ['kafka/foo/1,2,3', 'private/baz/3.4.5']
	Partitions []string `protobuf:"bytes,10,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *CreateDebugBundleRequest) Reset() {
	*x = CreateDebugBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDebugBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebugBundleRequest) ProtoMessage() {}

func (x *CreateDebugBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebugBundleRequest.ProtoReflect.Descriptor instead.
func (*CreateDebugBundleRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{1}
}

func (m *CreateDebugBundleRequest) GetAuthentication() isCreateDebugBundleRequest_Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetScram() *SCRAMAuth {
	if x, ok := x.GetAuthentication().(*CreateDebugBundleRequest_Scram); ok {
		return x.Scram
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetBrokerIds() []int32 {
	if x != nil {
		return x.BrokerIds
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetControllerLogsSizeLimitBytes() int32 {
	if x != nil {
		return x.ControllerLogsSizeLimitBytes
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetCpuProfilerWaitSeconds() int32 {
	if x != nil {
		return x.CpuProfilerWaitSeconds
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetLogsSince() *timestamppb.Timestamp {
	if x != nil {
		return x.LogsSince
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetLogsSizeLimitBytes() int32 {
	if x != nil {
		return x.LogsSizeLimitBytes
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetLogsUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.LogsUntil
	}
	return nil
}

func (x *CreateDebugBundleRequest) GetMetricsIntervalSeconds() int32 {
	if x != nil {
		return x.MetricsIntervalSeconds
	}
	return 0
}

func (x *CreateDebugBundleRequest) GetPartitions() []string {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type isCreateDebugBundleRequest_Authentication interface {
	isCreateDebugBundleRequest_Authentication()
}

type CreateDebugBundleRequest_Scram struct {
	Scram *SCRAMAuth `protobuf:"bytes,1,opt,name=scram,proto3,oneof"`
}

func (*CreateDebugBundleRequest_Scram) isCreateDebugBundleRequest_Authentication() {}

// Response to CreateDebugBundle.
type CreateDebugBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job ID. UUID.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *CreateDebugBundleResponse) Reset() {
	*x = CreateDebugBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDebugBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebugBundleResponse) ProtoMessage() {}

func (x *CreateDebugBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebugBundleResponse.ProtoReflect.Descriptor instead.
func (*CreateDebugBundleResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDebugBundleResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

// Gets status of debug bundle progress.
type GetDebugBundleStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional broker IDs to get. If not set / empty get all.
	BrokerIds []int32 `protobuf:"varint,1,rep,packed,name=broker_ids,json=brokerIds,proto3" json:"broker_ids,omitempty"`
}

func (x *GetDebugBundleStatusRequest) Reset() {
	*x = GetDebugBundleStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDebugBundleStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugBundleStatusRequest) ProtoMessage() {}

func (x *GetDebugBundleStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugBundleStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDebugBundleStatusRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{3}
}

func (x *GetDebugBundleStatusRequest) GetBrokerIds() []int32 {
	if x != nil {
		return x.BrokerIds
	}
	return nil
}

type DebugBundleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The broker ID.
	BrokerId int32 `protobuf:"varint,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	// The job UUID of this process.
	JobId string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The status of the job.
	Status DebugBundleStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=redpanda.api.console.v1alpha1.DebugBundleStatus_Status" json:"status,omitempty"`
	// When the job was started.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Path in API to get the file.
	Filename string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	// Only filled in once the process completes.  Content of stdout from rpk.
	Stdout []string `protobuf:"bytes,6,rep,name=stdout,proto3" json:"stdout,omitempty"`
	// Only filled in once the process completes.  Content of stderr from rpk.
	Stderr []string `protobuf:"bytes,7,rep,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *DebugBundleStatus) Reset() {
	*x = DebugBundleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugBundleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugBundleStatus) ProtoMessage() {}

func (x *DebugBundleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugBundleStatus.ProtoReflect.Descriptor instead.
func (*DebugBundleStatus) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{4}
}

func (x *DebugBundleStatus) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

func (x *DebugBundleStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *DebugBundleStatus) GetStatus() DebugBundleStatus_Status {
	if x != nil {
		return x.Status
	}
	return DebugBundleStatus_STATUS_UNSPECIFIED
}

func (x *DebugBundleStatus) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DebugBundleStatus) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DebugBundleStatus) GetStdout() []string {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *DebugBundleStatus) GetStderr() []string {
	if x != nil {
		return x.Stderr
	}
	return nil
}

// The response to GetDebugBundleStatus.
type GetDebugBundleStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*DebugBundleStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *GetDebugBundleStatusResponse) Reset() {
	*x = GetDebugBundleStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDebugBundleStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugBundleStatusResponse) ProtoMessage() {}

func (x *GetDebugBundleStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugBundleStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDebugBundleStatusResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{5}
}

func (x *GetDebugBundleStatusResponse) GetStatuses() []*DebugBundleStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type DeleteDebugBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Optional broker IDs. Do not set / empty for all.
	BrokerIds []int32 `protobuf:"varint,2,rep,packed,name=broker_ids,json=brokerIds,proto3" json:"broker_ids,omitempty"`
}

func (x *DeleteDebugBundleRequest) Reset() {
	*x = DeleteDebugBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDebugBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDebugBundleRequest) ProtoMessage() {}

func (x *DeleteDebugBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDebugBundleRequest.ProtoReflect.Descriptor instead.
func (*DeleteDebugBundleRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDebugBundleRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *DeleteDebugBundleRequest) GetBrokerIds() []int32 {
	if x != nil {
		return x.BrokerIds
	}
	return nil
}

// Response for DeleteDebugBundle.
type DeleteDebugBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*BundleError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *DeleteDebugBundleResponse) Reset() {
	*x = DeleteDebugBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDebugBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDebugBundleResponse) ProtoMessage() {}

func (x *DeleteDebugBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDebugBundleResponse.ProtoReflect.Descriptor instead.
func (*DeleteDebugBundleResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDebugBundleResponse) GetErrors() []*BundleError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Request for DeleteDebugBundleFile.
type DeleteDebugBundleFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Optional broker IDs. Do not set / empty for all.
	BrokerIds []int32 `protobuf:"varint,2,rep,packed,name=broker_ids,json=brokerIds,proto3" json:"broker_ids,omitempty"`
}

func (x *DeleteDebugBundleFileRequest) Reset() {
	*x = DeleteDebugBundleFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDebugBundleFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDebugBundleFileRequest) ProtoMessage() {}

func (x *DeleteDebugBundleFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDebugBundleFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteDebugBundleFileRequest) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDebugBundleFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DeleteDebugBundleFileRequest) GetBrokerIds() []int32 {
	if x != nil {
		return x.BrokerIds
	}
	return nil
}

// Response for DeleteDebugBundleFile.
type DeleteDebugBundleFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*BundleError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *DeleteDebugBundleFileResponse) Reset() {
	*x = DeleteDebugBundleFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDebugBundleFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDebugBundleFileResponse) ProtoMessage() {}

func (x *DeleteDebugBundleFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDebugBundleFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteDebugBundleFileResponse) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDebugBundleFileResponse) GetErrors() []*BundleError {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Error details for various responses and operations.
type BundleError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The broker ID.
	BrokerId int32 `protobuf:"varint,1,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	// The error code.
	Code BundleErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=redpanda.api.console.v1alpha1.BundleErrorCode" json:"code,omitempty"`
	// Additional information
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BundleError) Reset() {
	*x = BundleError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleError) ProtoMessage() {}

func (x *BundleError) ProtoReflect() protoreflect.Message {
	mi := &file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleError.ProtoReflect.Descriptor instead.
func (*BundleError) Descriptor() ([]byte, []int) {
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP(), []int{10}
}

func (x *BundleError) GetBrokerId() int32 {
	if x != nil {
		return x.BrokerId
	}
	return 0
}

func (x *BundleError) GetCode() BundleErrorCode {
	if x != nil {
		return x.Code
	}
	return BundleErrorCode_BUNDLE_ERROR_CODE_OK
}

func (x *BundleError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_redpanda_api_console_v1alpha1_debug_bundle_proto protoreflect.FileDescriptor

var file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDesc = []byte{
	0x0a, 0x30, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1d, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf7, 0x01, 0x0a, 0x09, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61,
	0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x41, 0x75,
	0x74, 0x68, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x09, 0x6d, 0x65,
	0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x60, 0x0a, 0x09, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53,
	0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x43, 0x52,
	0x41, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x45, 0x43, 0x48, 0x41, 0x4e, 0x49, 0x53, 0x4d, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x5f,
	0x53, 0x48, 0x41, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x02, 0x22, 0xb7, 0x04, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x43, 0x52, 0x41, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x19, 0x63, 0x70, 0x75, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x1a, 0x02, 0x28, 0x0f, 0x52, 0x16, 0x63, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x73, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52,
	0x12, 0x6c, 0x6f, 0x67, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x41,
	0x0a, 0x18, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x5a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x22, 0x6c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x22, 0x50, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x59, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22,
	0x63, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a,
	0xfc, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x2d, 0x0a,
	0x29, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25,
	0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x4e, 0x44, 0x4c,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a,
	0x25, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x4e, 0x44,
	0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x32, 0xd5,
	0x04, 0x0a, 0x12, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x91, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x37, 0x2e, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x94, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x2e, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xb1, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x72,
	0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x10, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x63, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x64,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x70, 0x61, 0x6e, 0x64, 0x61,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x41, 0x43, 0xaa, 0x02, 0x1d, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1d, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x29, 0x52, 0x65,
	0x64, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x52, 0x65, 0x64, 0x70, 0x61, 0x6e,
	0x64, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescOnce sync.Once
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescData = file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDesc
)

func file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescGZIP() []byte {
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescOnce.Do(func() {
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescData = protoimpl.X.CompressGZIP(file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescData)
	})
	return file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDescData
}

var file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_redpanda_api_console_v1alpha1_debug_bundle_proto_goTypes = []interface{}{
	(BundleErrorCode)(0),                  // 0: redpanda.api.console.v1alpha1.BundleErrorCode
	(SCRAMAuth_Mechanism)(0),              // 1: redpanda.api.console.v1alpha1.SCRAMAuth.Mechanism
	(DebugBundleStatus_Status)(0),         // 2: redpanda.api.console.v1alpha1.DebugBundleStatus.Status
	(*SCRAMAuth)(nil),                     // 3: redpanda.api.console.v1alpha1.SCRAMAuth
	(*CreateDebugBundleRequest)(nil),      // 4: redpanda.api.console.v1alpha1.CreateDebugBundleRequest
	(*CreateDebugBundleResponse)(nil),     // 5: redpanda.api.console.v1alpha1.CreateDebugBundleResponse
	(*GetDebugBundleStatusRequest)(nil),   // 6: redpanda.api.console.v1alpha1.GetDebugBundleStatusRequest
	(*DebugBundleStatus)(nil),             // 7: redpanda.api.console.v1alpha1.DebugBundleStatus
	(*GetDebugBundleStatusResponse)(nil),  // 8: redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse
	(*DeleteDebugBundleRequest)(nil),      // 9: redpanda.api.console.v1alpha1.DeleteDebugBundleRequest
	(*DeleteDebugBundleResponse)(nil),     // 10: redpanda.api.console.v1alpha1.DeleteDebugBundleResponse
	(*DeleteDebugBundleFileRequest)(nil),  // 11: redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest
	(*DeleteDebugBundleFileResponse)(nil), // 12: redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse
	(*BundleError)(nil),                   // 13: redpanda.api.console.v1alpha1.BundleError
	(*timestamppb.Timestamp)(nil),         // 14: google.protobuf.Timestamp
}
var file_redpanda_api_console_v1alpha1_debug_bundle_proto_depIdxs = []int32{
	1,  // 0: redpanda.api.console.v1alpha1.SCRAMAuth.mechanism:type_name -> redpanda.api.console.v1alpha1.SCRAMAuth.Mechanism
	3,  // 1: redpanda.api.console.v1alpha1.CreateDebugBundleRequest.scram:type_name -> redpanda.api.console.v1alpha1.SCRAMAuth
	14, // 2: redpanda.api.console.v1alpha1.CreateDebugBundleRequest.logs_since:type_name -> google.protobuf.Timestamp
	14, // 3: redpanda.api.console.v1alpha1.CreateDebugBundleRequest.logs_until:type_name -> google.protobuf.Timestamp
	2,  // 4: redpanda.api.console.v1alpha1.DebugBundleStatus.status:type_name -> redpanda.api.console.v1alpha1.DebugBundleStatus.Status
	14, // 5: redpanda.api.console.v1alpha1.DebugBundleStatus.created_at:type_name -> google.protobuf.Timestamp
	7,  // 6: redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse.statuses:type_name -> redpanda.api.console.v1alpha1.DebugBundleStatus
	13, // 7: redpanda.api.console.v1alpha1.DeleteDebugBundleResponse.errors:type_name -> redpanda.api.console.v1alpha1.BundleError
	13, // 8: redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse.errors:type_name -> redpanda.api.console.v1alpha1.BundleError
	0,  // 9: redpanda.api.console.v1alpha1.BundleError.code:type_name -> redpanda.api.console.v1alpha1.BundleErrorCode
	4,  // 10: redpanda.api.console.v1alpha1.DebugBundleService.CreateDebugBundle:input_type -> redpanda.api.console.v1alpha1.CreateDebugBundleRequest
	6,  // 11: redpanda.api.console.v1alpha1.DebugBundleService.GetDebugBundleStatus:input_type -> redpanda.api.console.v1alpha1.GetDebugBundleStatusRequest
	9,  // 12: redpanda.api.console.v1alpha1.DebugBundleService.DeleteDebugBundle:input_type -> redpanda.api.console.v1alpha1.DeleteDebugBundleRequest
	11, // 13: redpanda.api.console.v1alpha1.DebugBundleService.DeleteDebugBundleFile:input_type -> redpanda.api.console.v1alpha1.DeleteDebugBundleFileRequest
	5,  // 14: redpanda.api.console.v1alpha1.DebugBundleService.CreateDebugBundle:output_type -> redpanda.api.console.v1alpha1.CreateDebugBundleResponse
	8,  // 15: redpanda.api.console.v1alpha1.DebugBundleService.GetDebugBundleStatus:output_type -> redpanda.api.console.v1alpha1.GetDebugBundleStatusResponse
	10, // 16: redpanda.api.console.v1alpha1.DebugBundleService.DeleteDebugBundle:output_type -> redpanda.api.console.v1alpha1.DeleteDebugBundleResponse
	12, // 17: redpanda.api.console.v1alpha1.DebugBundleService.DeleteDebugBundleFile:output_type -> redpanda.api.console.v1alpha1.DeleteDebugBundleFileResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_redpanda_api_console_v1alpha1_debug_bundle_proto_init() }
func file_redpanda_api_console_v1alpha1_debug_bundle_proto_init() {
	if File_redpanda_api_console_v1alpha1_debug_bundle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCRAMAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDebugBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDebugBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDebugBundleStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugBundleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDebugBundleStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDebugBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDebugBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDebugBundleFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDebugBundleFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*CreateDebugBundleRequest_Scram)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redpanda_api_console_v1alpha1_debug_bundle_proto_goTypes,
		DependencyIndexes: file_redpanda_api_console_v1alpha1_debug_bundle_proto_depIdxs,
		EnumInfos:         file_redpanda_api_console_v1alpha1_debug_bundle_proto_enumTypes,
		MessageInfos:      file_redpanda_api_console_v1alpha1_debug_bundle_proto_msgTypes,
	}.Build()
	File_redpanda_api_console_v1alpha1_debug_bundle_proto = out.File
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_rawDesc = nil
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_goTypes = nil
	file_redpanda_api_console_v1alpha1_debug_bundle_proto_depIdxs = nil
}
