// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: redpanda/api/console/v1alpha1/rp_connect.proto

package consolev1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RedpandaConnectService_ListConnectPipelines_FullMethodName = "/redpanda.api.console.v1alpha1.RedpandaConnectService/ListConnectPipelines"
	RedpandaConnectService_GetConnectPipeline_FullMethodName   = "/redpanda.api.console.v1alpha1.RedpandaConnectService/GetConnectPipeline"
)

// RedpandaConnectServiceClient is the client API for RedpandaConnectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedpandaConnectServiceClient interface {
	// ListConnectPipelines lists all the connect pipelines based on optional filter.
	ListConnectPipelines(ctx context.Context, in *ListConnectPipelinesRequest, opts ...grpc.CallOption) (*ListConnectPipelinesResponse, error)
	// GetConnectPipeline retrieves exactly one pipeline by its name.
	GetConnectPipeline(ctx context.Context, in *GetConnectPipelineRequest, opts ...grpc.CallOption) (*GetConnectPipelineResponse, error)
}

type redpandaConnectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedpandaConnectServiceClient(cc grpc.ClientConnInterface) RedpandaConnectServiceClient {
	return &redpandaConnectServiceClient{cc}
}

func (c *redpandaConnectServiceClient) ListConnectPipelines(ctx context.Context, in *ListConnectPipelinesRequest, opts ...grpc.CallOption) (*ListConnectPipelinesResponse, error) {
	out := new(ListConnectPipelinesResponse)
	err := c.cc.Invoke(ctx, RedpandaConnectService_ListConnectPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redpandaConnectServiceClient) GetConnectPipeline(ctx context.Context, in *GetConnectPipelineRequest, opts ...grpc.CallOption) (*GetConnectPipelineResponse, error) {
	out := new(GetConnectPipelineResponse)
	err := c.cc.Invoke(ctx, RedpandaConnectService_GetConnectPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedpandaConnectServiceServer is the server API for RedpandaConnectService service.
// All implementations must embed UnimplementedRedpandaConnectServiceServer
// for forward compatibility
type RedpandaConnectServiceServer interface {
	// ListConnectPipelines lists all the connect pipelines based on optional filter.
	ListConnectPipelines(context.Context, *ListConnectPipelinesRequest) (*ListConnectPipelinesResponse, error)
	// GetConnectPipeline retrieves exactly one pipeline by its name.
	GetConnectPipeline(context.Context, *GetConnectPipelineRequest) (*GetConnectPipelineResponse, error)
	mustEmbedUnimplementedRedpandaConnectServiceServer()
}

// UnimplementedRedpandaConnectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRedpandaConnectServiceServer struct {
}

func (UnimplementedRedpandaConnectServiceServer) ListConnectPipelines(context.Context, *ListConnectPipelinesRequest) (*ListConnectPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectPipelines not implemented")
}
func (UnimplementedRedpandaConnectServiceServer) GetConnectPipeline(context.Context, *GetConnectPipelineRequest) (*GetConnectPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectPipeline not implemented")
}
func (UnimplementedRedpandaConnectServiceServer) mustEmbedUnimplementedRedpandaConnectServiceServer() {
}

// UnsafeRedpandaConnectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedpandaConnectServiceServer will
// result in compilation errors.
type UnsafeRedpandaConnectServiceServer interface {
	mustEmbedUnimplementedRedpandaConnectServiceServer()
}

func RegisterRedpandaConnectServiceServer(s grpc.ServiceRegistrar, srv RedpandaConnectServiceServer) {
	s.RegisterService(&RedpandaConnectService_ServiceDesc, srv)
}

func _RedpandaConnectService_ListConnectPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedpandaConnectServiceServer).ListConnectPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedpandaConnectService_ListConnectPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedpandaConnectServiceServer).ListConnectPipelines(ctx, req.(*ListConnectPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedpandaConnectService_GetConnectPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedpandaConnectServiceServer).GetConnectPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedpandaConnectService_GetConnectPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedpandaConnectServiceServer).GetConnectPipeline(ctx, req.(*GetConnectPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedpandaConnectService_ServiceDesc is the grpc.ServiceDesc for RedpandaConnectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedpandaConnectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "redpanda.api.console.v1alpha1.RedpandaConnectService",
	HandlerType: (*RedpandaConnectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConnectPipelines",
			Handler:    _RedpandaConnectService_ListConnectPipelines_Handler,
		},
		{
			MethodName: "GetConnectPipeline",
			Handler:    _RedpandaConnectService_GetConnectPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redpanda/api/console/v1alpha1/rp_connect.proto",
}
