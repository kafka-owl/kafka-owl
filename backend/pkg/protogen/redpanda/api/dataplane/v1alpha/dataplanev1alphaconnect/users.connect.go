// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha/users.proto

package dataplanev1alphaconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "redpanda.api.dataplane.v1alpha.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/redpanda.api.dataplane.v1alpha.UserService/ListUsers"
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/redpanda.api.dataplane.v1alpha.UserService/CreateUser"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/redpanda.api.dataplane.v1alpha.UserService/UpdateUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/redpanda.api.dataplane.v1alpha.UserService/DeleteUser"
)

// UserServiceClient is a client for the redpanda.api.dataplane.v1alpha.UserService service.
type UserServiceClient interface {
	ListUsers(context.Context, *connect.Request[v1alpha.ListUsersRequest]) (*connect.Response[v1alpha.ListUsersResponse], error)
	CreateUser(context.Context, *connect.Request[v1alpha.CreateUserRequest]) (*connect.Response[v1alpha.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1alpha.UpdateUserRequest]) (*connect.Response[v1alpha.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1alpha.DeleteUserRequest]) (*connect.Response[v1alpha.DeleteUserResponse], error)
}

// NewUserServiceClient constructs a client for the redpanda.api.dataplane.v1alpha.UserService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		listUsers: connect.NewClient[v1alpha.ListUsersRequest, v1alpha.ListUsersResponse](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			opts...,
		),
		createUser: connect.NewClient[v1alpha.CreateUserRequest, v1alpha.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			opts...,
		),
		updateUser: connect.NewClient[v1alpha.UpdateUserRequest, v1alpha.UpdateUserResponse](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			opts...,
		),
		deleteUser: connect.NewClient[v1alpha.DeleteUserRequest, v1alpha.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	listUsers  *connect.Client[v1alpha.ListUsersRequest, v1alpha.ListUsersResponse]
	createUser *connect.Client[v1alpha.CreateUserRequest, v1alpha.CreateUserResponse]
	updateUser *connect.Client[v1alpha.UpdateUserRequest, v1alpha.UpdateUserResponse]
	deleteUser *connect.Client[v1alpha.DeleteUserRequest, v1alpha.DeleteUserResponse]
}

// ListUsers calls redpanda.api.dataplane.v1alpha.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1alpha.ListUsersRequest]) (*connect.Response[v1alpha.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// CreateUser calls redpanda.api.dataplane.v1alpha.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1alpha.CreateUserRequest]) (*connect.Response[v1alpha.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls redpanda.api.dataplane.v1alpha.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1alpha.UpdateUserRequest]) (*connect.Response[v1alpha.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls redpanda.api.dataplane.v1alpha.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[v1alpha.DeleteUserRequest]) (*connect.Response[v1alpha.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the redpanda.api.dataplane.v1alpha.UserService
// service.
type UserServiceHandler interface {
	ListUsers(context.Context, *connect.Request[v1alpha.ListUsersRequest]) (*connect.Response[v1alpha.ListUsersResponse], error)
	CreateUser(context.Context, *connect.Request[v1alpha.CreateUserRequest]) (*connect.Response[v1alpha.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[v1alpha.UpdateUserRequest]) (*connect.Response[v1alpha.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[v1alpha.DeleteUserRequest]) (*connect.Response[v1alpha.DeleteUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		opts...,
	)
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		opts...,
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		opts...,
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		opts...,
	)
	return "/redpanda.api.dataplane.v1alpha.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[v1alpha.ListUsersRequest]) (*connect.Response[v1alpha.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha.UserService.ListUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[v1alpha.CreateUserRequest]) (*connect.Response[v1alpha.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[v1alpha.UpdateUserRequest]) (*connect.Response[v1alpha.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[v1alpha.DeleteUserRequest]) (*connect.Response[v1alpha.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("redpanda.api.dataplane.v1alpha.UserService.DeleteUser is not implemented"))
}
