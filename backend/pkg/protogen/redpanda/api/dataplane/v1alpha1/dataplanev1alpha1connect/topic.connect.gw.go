// Code generated by protoc-gen-connect-gateway. DO NOT EDIT.
//
// Source: redpanda/api/dataplane/v1alpha1/topic.proto

package dataplanev1alpha1connect

import (
	context "context"
	fmt "fmt"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	connect_gateway "go.vallahaye.net/connect-gateway"

	v1alpha1 "github.com/redpanda-data/console/backend/pkg/protogen/redpanda/api/dataplane/v1alpha1"
)

// TopicServiceGatewayServer implements the gRPC server API for the TopicService service.
type TopicServiceGatewayServer struct {
	v1alpha1.UnimplementedTopicServiceServer
	createTopic              connect_gateway.UnaryHandler[v1alpha1.CreateTopicRequest, v1alpha1.CreateTopicResponse]
	listTopics               connect_gateway.UnaryHandler[v1alpha1.ListTopicsRequest, v1alpha1.ListTopicsResponse]
	deleteTopic              connect_gateway.UnaryHandler[v1alpha1.DeleteTopicRequest, v1alpha1.DeleteTopicResponse]
	getTopicConfigurations   connect_gateway.UnaryHandler[v1alpha1.GetTopicConfigurationsRequest, v1alpha1.GetTopicConfigurationsResponse]
	updateTopicConfiguration connect_gateway.UnaryHandler[v1alpha1.UpdateTopicConfigurationRequest, v1alpha1.UpdateTopicConfigurationResponse]
	setTopicConfiguration    connect_gateway.UnaryHandler[v1alpha1.SetTopicConfigurationRequest, v1alpha1.SetTopicConfigurationResponse]
}

// NewTopicServiceGatewayServer constructs a Connect-Gateway gRPC server for the TopicService
// service.
func NewTopicServiceGatewayServer(svc TopicServiceHandler, opts ...connect_gateway.HandlerOption) *TopicServiceGatewayServer {
	return &TopicServiceGatewayServer{
		createTopic:              connect_gateway.NewUnaryHandler(TopicServiceCreateTopicProcedure, svc.CreateTopic, opts...),
		listTopics:               connect_gateway.NewUnaryHandler(TopicServiceListTopicsProcedure, svc.ListTopics, opts...),
		deleteTopic:              connect_gateway.NewUnaryHandler(TopicServiceDeleteTopicProcedure, svc.DeleteTopic, opts...),
		getTopicConfigurations:   connect_gateway.NewUnaryHandler(TopicServiceGetTopicConfigurationsProcedure, svc.GetTopicConfigurations, opts...),
		updateTopicConfiguration: connect_gateway.NewUnaryHandler(TopicServiceUpdateTopicConfigurationProcedure, svc.UpdateTopicConfiguration, opts...),
		setTopicConfiguration:    connect_gateway.NewUnaryHandler(TopicServiceSetTopicConfigurationProcedure, svc.SetTopicConfiguration, opts...),
	}
}

func (s *TopicServiceGatewayServer) CreateTopic(ctx context.Context, req *v1alpha1.CreateTopicRequest) (*v1alpha1.CreateTopicResponse, error) {
	return s.createTopic(ctx, req)
}

func (s *TopicServiceGatewayServer) ListTopics(ctx context.Context, req *v1alpha1.ListTopicsRequest) (*v1alpha1.ListTopicsResponse, error) {
	return s.listTopics(ctx, req)
}

func (s *TopicServiceGatewayServer) DeleteTopic(ctx context.Context, req *v1alpha1.DeleteTopicRequest) (*v1alpha1.DeleteTopicResponse, error) {
	return s.deleteTopic(ctx, req)
}

func (s *TopicServiceGatewayServer) GetTopicConfigurations(ctx context.Context, req *v1alpha1.GetTopicConfigurationsRequest) (*v1alpha1.GetTopicConfigurationsResponse, error) {
	return s.getTopicConfigurations(ctx, req)
}

func (s *TopicServiceGatewayServer) UpdateTopicConfiguration(ctx context.Context, req *v1alpha1.UpdateTopicConfigurationRequest) (*v1alpha1.UpdateTopicConfigurationResponse, error) {
	return s.updateTopicConfiguration(ctx, req)
}

func (s *TopicServiceGatewayServer) SetTopicConfiguration(ctx context.Context, req *v1alpha1.SetTopicConfigurationRequest) (*v1alpha1.SetTopicConfigurationResponse, error) {
	return s.setTopicConfiguration(ctx, req)
}

// RegisterTopicServiceHandlerGatewayServer registers the Connect handlers for the TopicService
// "svc" to "mux".
func RegisterTopicServiceHandlerGatewayServer(mux *runtime.ServeMux, svc TopicServiceHandler, opts ...connect_gateway.HandlerOption) {
	if err := v1alpha1.RegisterTopicServiceHandlerServer(context.TODO(), mux, NewTopicServiceGatewayServer(svc, opts...)); err != nil {
		panic(fmt.Errorf("connect-gateway: %w", err))
	}
}
