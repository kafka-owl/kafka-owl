// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha1/pipeline.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3 } from "@bufbuild/protobuf";
import { DeletePipelineRequest as DeletePipelineRequest$1, DeletePipelineResponse as DeletePipelineResponse$1, GetPipelineRequest as GetPipelineRequest$1, GetPipelineServiceConfigSchemaRequest as GetPipelineServiceConfigSchemaRequest$1, GetPipelineServiceConfigSchemaResponse as GetPipelineServiceConfigSchemaResponse$1, ListPipelinesRequest as ListPipelinesRequest$1, StartPipelineRequest as StartPipelineRequest$1, StopPipelineRequest as StopPipelineRequest$1 } from "../../dataplane/v1alpha2/pipeline_pb";

/**
 * RedpandaConnectTier is the tier of the pipeline.
 *
 * @generated from enum redpanda.api.console.v1alpha1.RedpandaConnectTier
 */
export enum RedpandaConnectTier {
  /**
   * @generated from enum value: REDPANDA_CONNECT_TIER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The development tier.
   *
   * @generated from enum value: REDPANDA_CONNECT_TIER_DEV = 1;
   */
  DEV = 1,

  /**
   * The standard tier.
   *
   * @generated from enum value: REDPANDA_CONNECT_TIER_STANDARD = 2;
   */
  STANDARD = 2,

  /**
   * The pro tier.
   *
   * @generated from enum value: REDPANDA_CONNECT_TIER_PRO = 3;
   */
  PRO = 3,

  /**
   * The custom tier.
   *
   * @generated from enum value: REDPANDA_CONNECT_TIER_CUSTOM = 4;
   */
  CUSTOM = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(RedpandaConnectTier)
proto3.util.setEnumType(RedpandaConnectTier, "redpanda.api.console.v1alpha1.RedpandaConnectTier", [
  { no: 0, name: "REDPANDA_CONNECT_TIER_UNSPECIFIED" },
  { no: 1, name: "REDPANDA_CONNECT_TIER_DEV" },
  { no: 2, name: "REDPANDA_CONNECT_TIER_STANDARD" },
  { no: 3, name: "REDPANDA_CONNECT_TIER_PRO" },
  { no: 4, name: "REDPANDA_CONNECT_TIER_CUSTOM" },
]);

/**
 * From redpanda.api.dataplane.v1alpha2.PipelineCreate message.
 *
 * @generated from message redpanda.api.console.v1alpha1.CreatePipelineRequest
 */
export class CreatePipelineRequest extends Message<CreatePipelineRequest> {
  /**
   * User friendly pipeline name.
   *
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * Pipeline description.
   *
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * The pipeline configuration in YAML format.
   *
   * @generated from field: string config_yaml = 3;
   */
  configYaml = "";

  /**
   * custom
   *
   * @generated from field: redpanda.api.console.v1alpha1.RedpandaConnectTier tier = 4;
   */
  tier = RedpandaConnectTier.UNSPECIFIED;

  constructor(data?: PartialMessage<CreatePipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreatePipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config_yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tier", kind: "enum", T: proto3.getEnumType(RedpandaConnectTier) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePipelineRequest {
    return new CreatePipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePipelineRequest | PlainMessage<CreatePipelineRequest> | undefined, b: CreatePipelineRequest | PlainMessage<CreatePipelineRequest> | undefined): boolean {
    return proto3.util.equals(CreatePipelineRequest, a, b);
  }
}

/**
 * Defines the pipeline resource.
 *
 * @generated from message redpanda.api.console.v1alpha1.Pipeline
 */
export class Pipeline extends Message<Pipeline> {
  /**
   * Pipeline ID.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * User friendly display name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Optional pipeline description.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * The configuration of the Pipeline as YAML.
   * See https://docs.redpanda.com/redpanda-connect/configuration/about/
   *
   * @generated from field: string config_yaml = 4;
   */
  configYaml = "";

  /**
   * @generated from field: redpanda.api.console.v1alpha1.RedpandaConnectTier tier = 5;
   */
  tier = RedpandaConnectTier.UNSPECIFIED;

  /**
   * The current pipeline state.
   *
   * @generated from field: redpanda.api.console.v1alpha1.Pipeline.State state = 6;
   */
  state = Pipeline_State.UNSPECIFIED;

  /**
   * @generated from field: redpanda.api.console.v1alpha1.Pipeline.Status status = 7;
   */
  status?: Pipeline_Status;

  constructor(data?: PartialMessage<Pipeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.Pipeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "config_yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tier", kind: "enum", T: proto3.getEnumType(RedpandaConnectTier) },
    { no: 6, name: "state", kind: "enum", T: proto3.getEnumType(Pipeline_State) },
    { no: 7, name: "status", kind: "message", T: Pipeline_Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline {
    return new Pipeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline {
    return new Pipeline().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline | PlainMessage<Pipeline> | undefined, b: Pipeline | PlainMessage<Pipeline> | undefined): boolean {
    return proto3.util.equals(Pipeline, a, b);
  }
}

/**
 * State of the pipeline.
 *
 * @generated from enum redpanda.api.console.v1alpha1.Pipeline.State
 */
export enum Pipeline_State {
  /**
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The pipeline is starting.
   *
   * @generated from enum value: STATE_STARTING = 1;
   */
  STARTING = 1,

  /**
   * The pipeline is running.
   *
   * @generated from enum value: STATE_RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The pipeline is in the process of stopping.
   *
   * @generated from enum value: STATE_STOPPING = 3;
   */
  STOPPING = 3,

  /**
   * The pipeline is stopped and in paused state.
   *
   * @generated from enum value: STATE_STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * The pipeline is in error state.
   *
   * @generated from enum value: STATE_ERROR = 5;
   */
  ERROR = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Pipeline_State)
proto3.util.setEnumType(Pipeline_State, "redpanda.api.console.v1alpha1.Pipeline.State", [
  { no: 0, name: "STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_STARTING" },
  { no: 2, name: "STATE_RUNNING" },
  { no: 3, name: "STATE_STOPPING" },
  { no: 4, name: "STATE_STOPPED" },
  { no: 5, name: "STATE_ERROR" },
]);

/**
 * Pipeline status can hold error message.
 *
 * @generated from message redpanda.api.console.v1alpha1.Pipeline.Status
 */
export class Pipeline_Status extends Message<Pipeline_Status> {
  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<Pipeline_Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.Pipeline.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pipeline_Status {
    return new Pipeline_Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pipeline_Status {
    return new Pipeline_Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pipeline_Status {
    return new Pipeline_Status().fromJsonString(jsonString, options);
  }

  static equals(a: Pipeline_Status | PlainMessage<Pipeline_Status> | undefined, b: Pipeline_Status | PlainMessage<Pipeline_Status> | undefined): boolean {
    return proto3.util.equals(Pipeline_Status, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.CreatePipelineResponse
 */
export class CreatePipelineResponse extends Message<CreatePipelineResponse> {
  /**
   * @generated from field: redpanda.api.console.v1alpha1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<CreatePipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreatePipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePipelineResponse {
    return new CreatePipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePipelineResponse {
    return new CreatePipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePipelineResponse {
    return new CreatePipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePipelineResponse | PlainMessage<CreatePipelineResponse> | undefined, b: CreatePipelineResponse | PlainMessage<CreatePipelineResponse> | undefined): boolean {
    return proto3.util.equals(CreatePipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetPipelineRequest
 */
export class GetPipelineRequest extends Message<GetPipelineRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.GetPipelineRequest request = 1;
   */
  request?: GetPipelineRequest$1;

  constructor(data?: PartialMessage<GetPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: GetPipelineRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineRequest {
    return new GetPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineRequest | PlainMessage<GetPipelineRequest> | undefined, b: GetPipelineRequest | PlainMessage<GetPipelineRequest> | undefined): boolean {
    return proto3.util.equals(GetPipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetPipelineResponse
 */
export class GetPipelineResponse extends Message<GetPipelineResponse> {
  /**
   * @generated from field: redpanda.api.console.v1alpha1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<GetPipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetPipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineResponse {
    return new GetPipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineResponse {
    return new GetPipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineResponse {
    return new GetPipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineResponse | PlainMessage<GetPipelineResponse> | undefined, b: GetPipelineResponse | PlainMessage<GetPipelineResponse> | undefined): boolean {
    return proto3.util.equals(GetPipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeletePipelineRequest
 */
export class DeletePipelineRequest extends Message<DeletePipelineRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.DeletePipelineRequest request = 1;
   */
  request?: DeletePipelineRequest$1;

  constructor(data?: PartialMessage<DeletePipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeletePipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: DeletePipelineRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePipelineRequest {
    return new DeletePipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePipelineRequest | PlainMessage<DeletePipelineRequest> | undefined, b: DeletePipelineRequest | PlainMessage<DeletePipelineRequest> | undefined): boolean {
    return proto3.util.equals(DeletePipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.DeletePipelineResponse
 */
export class DeletePipelineResponse extends Message<DeletePipelineResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.DeletePipelineResponse response = 1;
   */
  response?: DeletePipelineResponse$1;

  constructor(data?: PartialMessage<DeletePipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeletePipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: DeletePipelineResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePipelineResponse {
    return new DeletePipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePipelineResponse {
    return new DeletePipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePipelineResponse {
    return new DeletePipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePipelineResponse | PlainMessage<DeletePipelineResponse> | undefined, b: DeletePipelineResponse | PlainMessage<DeletePipelineResponse> | undefined): boolean {
    return proto3.util.equals(DeletePipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListPipelinesResponse
 */
export class ListPipelinesResponse extends Message<ListPipelinesResponse> {
  /**
   * @generated from field: repeated redpanda.api.console.v1alpha1.Pipeline pipelines = 1;
   */
  pipelines: Pipeline[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListPipelinesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListPipelinesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipelines", kind: "message", T: Pipeline, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPipelinesResponse {
    return new ListPipelinesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPipelinesResponse | PlainMessage<ListPipelinesResponse> | undefined, b: ListPipelinesResponse | PlainMessage<ListPipelinesResponse> | undefined): boolean {
    return proto3.util.equals(ListPipelinesResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.ListPipelinesRequest
 */
export class ListPipelinesRequest extends Message<ListPipelinesRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.ListPipelinesRequest request = 1;
   */
  request?: ListPipelinesRequest$1;

  constructor(data?: PartialMessage<ListPipelinesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListPipelinesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: ListPipelinesRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPipelinesRequest {
    return new ListPipelinesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPipelinesRequest | PlainMessage<ListPipelinesRequest> | undefined, b: ListPipelinesRequest | PlainMessage<ListPipelinesRequest> | undefined): boolean {
    return proto3.util.equals(ListPipelinesRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.UpdatePipelineRequest
 */
export class UpdatePipelineRequest extends Message<UpdatePipelineRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Pipeline name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Pipeline description.
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * The pipeline configuration in YAML format.
   *
   * @generated from field: string config_yaml = 4;
   */
  configYaml = "";

  /**
   * custom
   *
   * @generated from field: redpanda.api.console.v1alpha1.RedpandaConnectTier tier = 5;
   */
  tier = RedpandaConnectTier.UNSPECIFIED;

  /**
   * The fields to be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 6;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdatePipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UpdatePipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "config_yaml", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tier", kind: "enum", T: proto3.getEnumType(RedpandaConnectTier) },
    { no: 6, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePipelineRequest {
    return new UpdatePipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePipelineRequest {
    return new UpdatePipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePipelineRequest {
    return new UpdatePipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePipelineRequest | PlainMessage<UpdatePipelineRequest> | undefined, b: UpdatePipelineRequest | PlainMessage<UpdatePipelineRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.UpdatePipelineResponse
 */
export class UpdatePipelineResponse extends Message<UpdatePipelineResponse> {
  /**
   * @generated from field: redpanda.api.console.v1alpha1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<UpdatePipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UpdatePipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePipelineResponse {
    return new UpdatePipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePipelineResponse {
    return new UpdatePipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePipelineResponse {
    return new UpdatePipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePipelineResponse | PlainMessage<UpdatePipelineResponse> | undefined, b: UpdatePipelineResponse | PlainMessage<UpdatePipelineResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.StopPipelineRequest
 */
export class StopPipelineRequest extends Message<StopPipelineRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.StopPipelineRequest request = 1;
   */
  request?: StopPipelineRequest$1;

  constructor(data?: PartialMessage<StopPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.StopPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: StopPipelineRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopPipelineRequest {
    return new StopPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopPipelineRequest | PlainMessage<StopPipelineRequest> | undefined, b: StopPipelineRequest | PlainMessage<StopPipelineRequest> | undefined): boolean {
    return proto3.util.equals(StopPipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.StopPipelineResponse
 */
export class StopPipelineResponse extends Message<StopPipelineResponse> {
  /**
   * @generated from field: redpanda.api.console.v1alpha1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<StopPipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.StopPipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopPipelineResponse {
    return new StopPipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopPipelineResponse | PlainMessage<StopPipelineResponse> | undefined, b: StopPipelineResponse | PlainMessage<StopPipelineResponse> | undefined): boolean {
    return proto3.util.equals(StopPipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.StartPipelineRequest
 */
export class StartPipelineRequest extends Message<StartPipelineRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.StartPipelineRequest request = 1;
   */
  request?: StartPipelineRequest$1;

  constructor(data?: PartialMessage<StartPipelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.StartPipelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: StartPipelineRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPipelineRequest {
    return new StartPipelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartPipelineRequest | PlainMessage<StartPipelineRequest> | undefined, b: StartPipelineRequest | PlainMessage<StartPipelineRequest> | undefined): boolean {
    return proto3.util.equals(StartPipelineRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.StartPipelineResponse
 */
export class StartPipelineResponse extends Message<StartPipelineResponse> {
  /**
   * @generated from field: redpanda.api.console.v1alpha1.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  constructor(data?: PartialMessage<StartPipelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.StartPipelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pipeline", kind: "message", T: Pipeline },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPipelineResponse {
    return new StartPipelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartPipelineResponse | PlainMessage<StartPipelineResponse> | undefined, b: StartPipelineResponse | PlainMessage<StartPipelineResponse> | undefined): boolean {
    return proto3.util.equals(StartPipelineResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetPipelineServiceConfigSchemaRequest
 */
export class GetPipelineServiceConfigSchemaRequest extends Message<GetPipelineServiceConfigSchemaRequest> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaRequest request = 1;
   */
  request?: GetPipelineServiceConfigSchemaRequest$1;

  constructor(data?: PartialMessage<GetPipelineServiceConfigSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetPipelineServiceConfigSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "message", T: GetPipelineServiceConfigSchemaRequest$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineServiceConfigSchemaRequest {
    return new GetPipelineServiceConfigSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineServiceConfigSchemaRequest {
    return new GetPipelineServiceConfigSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineServiceConfigSchemaRequest {
    return new GetPipelineServiceConfigSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineServiceConfigSchemaRequest | PlainMessage<GetPipelineServiceConfigSchemaRequest> | undefined, b: GetPipelineServiceConfigSchemaRequest | PlainMessage<GetPipelineServiceConfigSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GetPipelineServiceConfigSchemaRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.console.v1alpha1.GetPipelineServiceConfigSchemaResponse
 */
export class GetPipelineServiceConfigSchemaResponse extends Message<GetPipelineServiceConfigSchemaResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaResponse response = 1;
   */
  response?: GetPipelineServiceConfigSchemaResponse$1;

  constructor(data?: PartialMessage<GetPipelineServiceConfigSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetPipelineServiceConfigSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "message", T: GetPipelineServiceConfigSchemaResponse$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPipelineServiceConfigSchemaResponse {
    return new GetPipelineServiceConfigSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPipelineServiceConfigSchemaResponse {
    return new GetPipelineServiceConfigSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPipelineServiceConfigSchemaResponse {
    return new GetPipelineServiceConfigSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPipelineServiceConfigSchemaResponse | PlainMessage<GetPipelineServiceConfigSchemaResponse> | undefined, b: GetPipelineServiceConfigSchemaResponse | PlainMessage<GetPipelineServiceConfigSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GetPipelineServiceConfigSchemaResponse, a, b);
  }
}

