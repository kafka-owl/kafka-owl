// @generated by protoc-gen-es v1.6.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/console/v1alpha1/security.proto (package redpanda.api.console.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message redpanda.api.console.v1alpha1.Security
 */
export class Security extends Message<Security> {
  constructor(data?: PartialMessage<Security>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.Security";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Security {
    return new Security().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Security {
    return new Security().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Security {
    return new Security().fromJsonString(jsonString, options);
  }

  static equals(a: Security | PlainMessage<Security> | undefined, b: Security | PlainMessage<Security> | undefined): boolean {
    return proto3.util.equals(Security, a, b);
  }
}

/**
 * @generated from enum redpanda.api.console.v1alpha1.Security.PrincipalType
 */
export enum Security_PrincipalType {
  /**
   * @generated from enum value: PRINCIPAL_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PRINCIPAL_TYPE_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: PRINCIPAL_TYPE_GROUP = 2;
   */
  GROUP = 2,

  /**
   * @generated from enum value: PRINCIPAL_TYPE_REDPANDA_ROLE = 3;
   */
  REDPANDA_ROLE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Security_PrincipalType)
proto3.util.setEnumType(Security_PrincipalType, "redpanda.api.console.v1alpha1.Security.PrincipalType", [
  { no: 0, name: "PRINCIPAL_TYPE_UNSPECIFIED" },
  { no: 1, name: "PRINCIPAL_TYPE_USER" },
  { no: 2, name: "PRINCIPAL_TYPE_GROUP" },
  { no: 3, name: "PRINCIPAL_TYPE_REDPANDA_ROLE" },
]);

/**
 * Role defines a role in the system.
 *
 * @generated from message redpanda.api.console.v1alpha1.Role
 */
export class Role extends Message<Role> {
  /**
   * The name of the role.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 * ListRolesRequest is the request for ListRoles.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRolesRequest
 */
export class ListRolesRequest extends Message<ListRolesRequest> {
  /**
   * Optional filter.
   *
   * @generated from field: optional redpanda.api.console.v1alpha1.ListRolesRequest.Filter filter = 1;
   */
  filter?: ListRolesRequest_Filter;

  /**
   * Page size.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListRolesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRolesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: ListRolesRequest_Filter, opt: true },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesRequest {
    return new ListRolesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesRequest | PlainMessage<ListRolesRequest> | undefined, b: ListRolesRequest | PlainMessage<ListRolesRequest> | undefined): boolean {
    return proto3.util.equals(ListRolesRequest, a, b);
  }
}

/**
 * Filter options.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRolesRequest.Filter
 */
export class ListRolesRequest_Filter extends Message<ListRolesRequest_Filter> {
  /**
   * Filter results only roles named with the prefix.
   *
   * @generated from field: string name_prefix = 1;
   */
  namePrefix = "";

  /**
   * Filter results to only roles with names which contain the string.
   *
   * @generated from field: string name_contains = 2;
   */
  nameContains = "";

  /**
   * Return only roles assigned to this principal.
   *
   * @generated from field: optional string principal = 3;
   */
  principal?: string;

  /**
   * Return only roles of this principal type.
   * Qualifies parameter principal has no effect on its own.
   *
   * @generated from field: optional redpanda.api.console.v1alpha1.Security.PrincipalType principal_type = 4;
   */
  principalType?: Security_PrincipalType;

  constructor(data?: PartialMessage<ListRolesRequest_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRolesRequest.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name_contains", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "principal_type", kind: "enum", T: proto3.getEnumType(Security_PrincipalType), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesRequest_Filter {
    return new ListRolesRequest_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesRequest_Filter {
    return new ListRolesRequest_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesRequest_Filter {
    return new ListRolesRequest_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesRequest_Filter | PlainMessage<ListRolesRequest_Filter> | undefined, b: ListRolesRequest_Filter | PlainMessage<ListRolesRequest_Filter> | undefined): boolean {
    return proto3.util.equals(ListRolesRequest_Filter, a, b);
  }
}

/**
 * ListRolesResponse is the response for ListRoles.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRolesResponse
 */
export class ListRolesResponse extends Message<ListRolesResponse> {
  /**
   * The roles in the system.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.Role roles = 1;
   */
  roles: Role[] = [];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListRolesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRolesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "message", T: Role, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesResponse {
    return new ListRolesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesResponse | PlainMessage<ListRolesResponse> | undefined, b: ListRolesResponse | PlainMessage<ListRolesResponse> | undefined): boolean {
    return proto3.util.equals(ListRolesResponse, a, b);
  }
}

/**
 * CreateRoleRequest is the request for CreateRole.
 *
 * @generated from message redpanda.api.console.v1alpha1.CreateRoleRequest
 */
export class CreateRoleRequest extends Message<CreateRoleRequest> {
  /**
   * The role name.
   *
   * @generated from field: string role = 1;
   */
  role = "";

  constructor(data?: PartialMessage<CreateRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreateRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoleRequest {
    return new CreateRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoleRequest {
    return new CreateRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoleRequest {
    return new CreateRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoleRequest | PlainMessage<CreateRoleRequest> | undefined, b: CreateRoleRequest | PlainMessage<CreateRoleRequest> | undefined): boolean {
    return proto3.util.equals(CreateRoleRequest, a, b);
  }
}

/**
 * CreateRoleResponse is the response for CreateRole.
 *
 * @generated from message redpanda.api.console.v1alpha1.CreateRoleResponse
 */
export class CreateRoleResponse extends Message<CreateRoleResponse> {
  /**
   * The role.
   *
   * @generated from field: redpanda.api.console.v1alpha1.Role role = 1;
   */
  role?: Role;

  constructor(data?: PartialMessage<CreateRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.CreateRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoleResponse {
    return new CreateRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoleResponse {
    return new CreateRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoleResponse {
    return new CreateRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoleResponse | PlainMessage<CreateRoleResponse> | undefined, b: CreateRoleResponse | PlainMessage<CreateRoleResponse> | undefined): boolean {
    return proto3.util.equals(CreateRoleResponse, a, b);
  }
}

/**
 * CreateRoleRequest is the request for CreateRole.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetRoleRequest
 */
export class GetRoleRequest extends Message<GetRoleRequest> {
  /**
   * The role name.
   *
   * @generated from field: string role = 1;
   */
  role = "";

  constructor(data?: PartialMessage<GetRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoleRequest {
    return new GetRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoleRequest | PlainMessage<GetRoleRequest> | undefined, b: GetRoleRequest | PlainMessage<GetRoleRequest> | undefined): boolean {
    return proto3.util.equals(GetRoleRequest, a, b);
  }
}

/**
 * GetRoleResponse is the response to GetRole.
 *
 * @generated from message redpanda.api.console.v1alpha1.GetRoleResponse
 */
export class GetRoleResponse extends Message<GetRoleResponse> {
  /**
   * The Role.
   *
   * @generated from field: redpanda.api.console.v1alpha1.Role role = 1;
   */
  role?: Role;

  /**
   * Members assigned to the role.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.RoleMembership members = 2;
   */
  members: RoleMembership[] = [];

  constructor(data?: PartialMessage<GetRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.GetRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "message", T: Role },
    { no: 2, name: "members", kind: "message", T: RoleMembership, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoleResponse {
    return new GetRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoleResponse {
    return new GetRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoleResponse {
    return new GetRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoleResponse | PlainMessage<GetRoleResponse> | undefined, b: GetRoleResponse | PlainMessage<GetRoleResponse> | undefined): boolean {
    return proto3.util.equals(GetRoleResponse, a, b);
  }
}

/**
 * UpdateRoleRequest is the request for UpdateRole.
 *
 * @generated from message redpanda.api.console.v1alpha1.UpdateRoleRequest
 */
export class UpdateRoleRequest extends Message<UpdateRoleRequest> {
  /**
   * The role name.
   *
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * The new role name.
   *
   * @generated from field: string new_name = 2;
   */
  newName = "";

  constructor(data?: PartialMessage<UpdateRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UpdateRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleRequest {
    return new UpdateRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleRequest | PlainMessage<UpdateRoleRequest> | undefined, b: UpdateRoleRequest | PlainMessage<UpdateRoleRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRoleRequest, a, b);
  }
}

/**
 * UpdateRoleResponse is the response for UpdateRole.
 *
 * @generated from message redpanda.api.console.v1alpha1.UpdateRoleResponse
 */
export class UpdateRoleResponse extends Message<UpdateRoleResponse> {
  /**
   * The role.
   *
   * @generated from field: redpanda.api.console.v1alpha1.Role role = 1;
   */
  role?: Role;

  constructor(data?: PartialMessage<UpdateRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UpdateRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "message", T: Role },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleResponse {
    return new UpdateRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleResponse {
    return new UpdateRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleResponse {
    return new UpdateRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleResponse | PlainMessage<UpdateRoleResponse> | undefined, b: UpdateRoleResponse | PlainMessage<UpdateRoleResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRoleResponse, a, b);
  }
}

/**
 * DeleteRoleRequest is the request for DeleteRole.
 *
 * @generated from message redpanda.api.console.v1alpha1.DeleteRoleRequest
 */
export class DeleteRoleRequest extends Message<DeleteRoleRequest> {
  /**
   * The role name.
   *
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * Whether to delete the ACLs bound to the role.
   *
   * @generated from field: optional bool delete_acls = 2;
   */
  deleteAcls?: boolean;

  constructor(data?: PartialMessage<DeleteRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "delete_acls", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRoleRequest {
    return new DeleteRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRoleRequest {
    return new DeleteRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRoleRequest {
    return new DeleteRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRoleRequest | PlainMessage<DeleteRoleRequest> | undefined, b: DeleteRoleRequest | PlainMessage<DeleteRoleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRoleRequest, a, b);
  }
}

/**
 * DeleteRoleResponse is the response for DeleteRole.
 *
 * @generated from message redpanda.api.console.v1alpha1.DeleteRoleResponse
 */
export class DeleteRoleResponse extends Message<DeleteRoleResponse> {
  constructor(data?: PartialMessage<DeleteRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.DeleteRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRoleResponse {
    return new DeleteRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRoleResponse {
    return new DeleteRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRoleResponse {
    return new DeleteRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRoleResponse | PlainMessage<DeleteRoleResponse> | undefined, b: DeleteRoleResponse | PlainMessage<DeleteRoleResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRoleResponse, a, b);
  }
}

/**
 * List role members for a role. That is user principals assigned to that role.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRoleMembersRequest
 */
export class ListRoleMembersRequest extends Message<ListRoleMembersRequest> {
  /**
   * The role name.
   *
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * Optional filter.
   *
   * @generated from field: optional redpanda.api.console.v1alpha1.ListRoleMembersRequest.Filter filter = 2;
   */
  filter?: ListRoleMembersRequest_Filter;

  /**
   * Page size.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListRoleMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRoleMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filter", kind: "message", T: ListRoleMembersRequest_Filter, opt: true },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoleMembersRequest {
    return new ListRoleMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoleMembersRequest {
    return new ListRoleMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRoleMembersRequest {
    return new ListRoleMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRoleMembersRequest | PlainMessage<ListRoleMembersRequest> | undefined, b: ListRoleMembersRequest | PlainMessage<ListRoleMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListRoleMembersRequest, a, b);
  }
}

/**
 * Filter options.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRoleMembersRequest.Filter
 */
export class ListRoleMembersRequest_Filter extends Message<ListRoleMembersRequest_Filter> {
  /**
   * Filter results to only members named with the prefix.
   *
   * @generated from field: string name_prefix = 1;
   */
  namePrefix = "";

  /**
   * Filter results to only members with names which contain the string.
   *
   * @generated from field: string name_contains = 2;
   */
  nameContains = "";

  constructor(data?: PartialMessage<ListRoleMembersRequest_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRoleMembersRequest.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name_contains", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoleMembersRequest_Filter {
    return new ListRoleMembersRequest_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoleMembersRequest_Filter {
    return new ListRoleMembersRequest_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRoleMembersRequest_Filter {
    return new ListRoleMembersRequest_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: ListRoleMembersRequest_Filter | PlainMessage<ListRoleMembersRequest_Filter> | undefined, b: ListRoleMembersRequest_Filter | PlainMessage<ListRoleMembersRequest_Filter> | undefined): boolean {
    return proto3.util.equals(ListRoleMembersRequest_Filter, a, b);
  }
}

/**
 * ListRoleMembersResponse is the response for ListRoleMembers.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRoleMembersResponse
 */
export class ListRoleMembersResponse extends Message<ListRoleMembersResponse> {
  /**
   * Members assigned to the role.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.RoleMembership members = 1;
   */
  members: RoleMembership[] = [];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListRoleMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRoleMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: RoleMembership, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoleMembersResponse {
    return new ListRoleMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoleMembersResponse {
    return new ListRoleMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRoleMembersResponse {
    return new ListRoleMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRoleMembersResponse | PlainMessage<ListRoleMembersResponse> | undefined, b: ListRoleMembersResponse | PlainMessage<ListRoleMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListRoleMembersResponse, a, b);
  }
}

/**
 * RoleMembership is the role membership.
 *
 * @generated from message redpanda.api.console.v1alpha1.RoleMembership
 */
export class RoleMembership extends Message<RoleMembership> {
  /**
   * The name of the principal assigned to the role.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The principal type.
   *
   * @generated from field: redpanda.api.console.v1alpha1.Security.PrincipalType principal_type = 2;
   */
  principalType = Security_PrincipalType.UNSPECIFIED;

  constructor(data?: PartialMessage<RoleMembership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.RoleMembership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "principal_type", kind: "enum", T: proto3.getEnumType(Security_PrincipalType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleMembership {
    return new RoleMembership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleMembership {
    return new RoleMembership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleMembership {
    return new RoleMembership().fromJsonString(jsonString, options);
  }

  static equals(a: RoleMembership | PlainMessage<RoleMembership> | undefined, b: RoleMembership | PlainMessage<RoleMembership> | undefined): boolean {
    return proto3.util.equals(RoleMembership, a, b);
  }
}

/**
 * UpdateRoleMembershipRequest is the request to UpdateRoleMembership.
 *
 * @generated from message redpanda.api.console.v1alpha1.UpdateRoleMembershipRequest
 */
export class UpdateRoleMembershipRequest extends Message<UpdateRoleMembershipRequest> {
  /**
   * The role name.
   *
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * Create the role if it doesn't already exist.
   * If the role is created in this way, the “add” list will be respected, but the “remove” list will be ignored.
   *
   * @generated from field: optional bool create = 2;
   */
  create?: boolean;

  /**
   * Members to assign to the role.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.RoleMembership add = 3;
   */
  add: RoleMembership[] = [];

  /**
   * Members to remove from the role.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.RoleMembership remove = 4;
   */
  remove: RoleMembership[] = [];

  constructor(data?: PartialMessage<UpdateRoleMembershipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UpdateRoleMembershipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: "add", kind: "message", T: RoleMembership, repeated: true },
    { no: 4, name: "remove", kind: "message", T: RoleMembership, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleMembershipRequest {
    return new UpdateRoleMembershipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleMembershipRequest {
    return new UpdateRoleMembershipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleMembershipRequest {
    return new UpdateRoleMembershipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleMembershipRequest | PlainMessage<UpdateRoleMembershipRequest> | undefined, b: UpdateRoleMembershipRequest | PlainMessage<UpdateRoleMembershipRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRoleMembershipRequest, a, b);
  }
}

/**
 * UpdateRoleMembershipResponse is the response for UpdateRoleMembership.
 *
 * @generated from message redpanda.api.console.v1alpha1.UpdateRoleMembershipResponse
 */
export class UpdateRoleMembershipResponse extends Message<UpdateRoleMembershipResponse> {
  /**
   * The role name.
   *
   * @generated from field: string role = 1;
   */
  role = "";

  /**
   * Members assigned to the role.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.RoleMembership added = 2;
   */
  added: RoleMembership[] = [];

  /**
   * Members removed from the role.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.RoleMembership removed = 3;
   */
  removed: RoleMembership[] = [];

  constructor(data?: PartialMessage<UpdateRoleMembershipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.UpdateRoleMembershipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "added", kind: "message", T: RoleMembership, repeated: true },
    { no: 3, name: "removed", kind: "message", T: RoleMembership, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRoleMembershipResponse {
    return new UpdateRoleMembershipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRoleMembershipResponse {
    return new UpdateRoleMembershipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRoleMembershipResponse {
    return new UpdateRoleMembershipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRoleMembershipResponse | PlainMessage<UpdateRoleMembershipResponse> | undefined, b: UpdateRoleMembershipResponse | PlainMessage<UpdateRoleMembershipResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRoleMembershipResponse, a, b);
  }
}

/**
 * ListUserRolesRequest is the request for ListUserRoles.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListUserRolesRequest
 */
export class ListUserRolesRequest extends Message<ListUserRolesRequest> {
  /**
   * Optional filter.
   *
   * @generated from field: optional redpanda.api.console.v1alpha1.ListUserRolesRequest.Filter filter = 1;
   */
  filter?: ListUserRolesRequest_Filter;

  /**
   * Page size.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListUserRolesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListUserRolesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: ListUserRolesRequest_Filter, opt: true },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserRolesRequest {
    return new ListUserRolesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserRolesRequest {
    return new ListUserRolesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserRolesRequest {
    return new ListUserRolesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserRolesRequest | PlainMessage<ListUserRolesRequest> | undefined, b: ListUserRolesRequest | PlainMessage<ListUserRolesRequest> | undefined): boolean {
    return proto3.util.equals(ListUserRolesRequest, a, b);
  }
}

/**
 * Filter options.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListUserRolesRequest.Filter
 */
export class ListUserRolesRequest_Filter extends Message<ListUserRolesRequest_Filter> {
  /**
   * Filter results to only roles named with the prefix.
   *
   * @generated from field: string name_prefix = 1;
   */
  namePrefix = "";

  /**
   * Filter results to only roles with names which contain the string.
   *
   * @generated from field: string name_contains = 2;
   */
  nameContains = "";

  constructor(data?: PartialMessage<ListUserRolesRequest_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListUserRolesRequest.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name_contains", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserRolesRequest_Filter {
    return new ListUserRolesRequest_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserRolesRequest_Filter {
    return new ListUserRolesRequest_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserRolesRequest_Filter {
    return new ListUserRolesRequest_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserRolesRequest_Filter | PlainMessage<ListUserRolesRequest_Filter> | undefined, b: ListUserRolesRequest_Filter | PlainMessage<ListUserRolesRequest_Filter> | undefined): boolean {
    return proto3.util.equals(ListUserRolesRequest_Filter, a, b);
  }
}

/**
 * ListUserRolesResponse is the response for ListUserRoles.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListUserRolesResponse
 */
export class ListUserRolesResponse extends Message<ListUserRolesResponse> {
  /**
   * The roles in the system.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.Role roles = 1;
   */
  roles: Role[] = [];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListUserRolesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListUserRolesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "message", T: Role, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserRolesResponse {
    return new ListUserRolesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserRolesResponse {
    return new ListUserRolesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserRolesResponse {
    return new ListUserRolesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserRolesResponse | PlainMessage<ListUserRolesResponse> | undefined, b: ListUserRolesResponse | PlainMessage<ListUserRolesResponse> | undefined): boolean {
    return proto3.util.equals(ListUserRolesResponse, a, b);
  }
}

/**
 * ListRolesWithMembersRequest is the request for ListRolesWithMembers.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRolesWithMembersRequest
 */
export class ListRolesWithMembersRequest extends Message<ListRolesWithMembersRequest> {
  /**
   * Optional filter.
   *
   * @generated from field: optional redpanda.api.console.v1alpha1.ListRolesWithMembersRequest.Filter filter = 1;
   */
  filter?: ListRolesWithMembersRequest_Filter;

  /**
   * Page size.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * Value of the next_page_token field returned by the previous response.
   * If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListRolesWithMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRolesWithMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filter", kind: "message", T: ListRolesWithMembersRequest_Filter, opt: true },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesWithMembersRequest {
    return new ListRolesWithMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesWithMembersRequest {
    return new ListRolesWithMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesWithMembersRequest {
    return new ListRolesWithMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesWithMembersRequest | PlainMessage<ListRolesWithMembersRequest> | undefined, b: ListRolesWithMembersRequest | PlainMessage<ListRolesWithMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListRolesWithMembersRequest, a, b);
  }
}

/**
 * Filter options.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRolesWithMembersRequest.Filter
 */
export class ListRolesWithMembersRequest_Filter extends Message<ListRolesWithMembersRequest_Filter> {
  /**
   * Filter results only roles named with the prefix.
   *
   * @generated from field: string name_prefix = 1;
   */
  namePrefix = "";

  /**
   * Filter results to only roles with names which contain the string.
   *
   * @generated from field: string name_contains = 2;
   */
  nameContains = "";

  constructor(data?: PartialMessage<ListRolesWithMembersRequest_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRolesWithMembersRequest.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name_contains", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesWithMembersRequest_Filter {
    return new ListRolesWithMembersRequest_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesWithMembersRequest_Filter {
    return new ListRolesWithMembersRequest_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesWithMembersRequest_Filter {
    return new ListRolesWithMembersRequest_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesWithMembersRequest_Filter | PlainMessage<ListRolesWithMembersRequest_Filter> | undefined, b: ListRolesWithMembersRequest_Filter | PlainMessage<ListRolesWithMembersRequest_Filter> | undefined): boolean {
    return proto3.util.equals(ListRolesWithMembersRequest_Filter, a, b);
  }
}

/**
 * RoleWithMembers is role data with members assigned to the role.
 *
 * @generated from message redpanda.api.console.v1alpha1.RoleWithMembers
 */
export class RoleWithMembers extends Message<RoleWithMembers> {
  /**
   * The role.
   *
   * @generated from field: redpanda.api.console.v1alpha1.Role role = 1;
   */
  role?: Role;

  /**
   * Members assigned to the role.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.RoleMembership members = 2;
   */
  members: RoleMembership[] = [];

  constructor(data?: PartialMessage<RoleWithMembers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.RoleWithMembers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "role", kind: "message", T: Role },
    { no: 2, name: "members", kind: "message", T: RoleMembership, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleWithMembers {
    return new RoleWithMembers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleWithMembers {
    return new RoleWithMembers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleWithMembers {
    return new RoleWithMembers().fromJsonString(jsonString, options);
  }

  static equals(a: RoleWithMembers | PlainMessage<RoleWithMembers> | undefined, b: RoleWithMembers | PlainMessage<RoleWithMembers> | undefined): boolean {
    return proto3.util.equals(RoleWithMembers, a, b);
  }
}

/**
 * ListRolesWithMembersResponse is the response for ListRolesWithMembers.
 *
 * @generated from message redpanda.api.console.v1alpha1.ListRolesWithMembersResponse
 */
export class ListRolesWithMembersResponse extends Message<ListRolesWithMembersResponse> {
  /**
   * The roles in the system.
   *
   * @generated from field: repeated redpanda.api.console.v1alpha1.RoleWithMembers roles = 1;
   */
  roles: RoleWithMembers[] = [];

  /**
   * Token to retrieve the next page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListRolesWithMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.console.v1alpha1.ListRolesWithMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "roles", kind: "message", T: RoleWithMembers, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRolesWithMembersResponse {
    return new ListRolesWithMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRolesWithMembersResponse {
    return new ListRolesWithMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRolesWithMembersResponse {
    return new ListRolesWithMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRolesWithMembersResponse | PlainMessage<ListRolesWithMembersResponse> | undefined, b: ListRolesWithMembersResponse | PlainMessage<ListRolesWithMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListRolesWithMembersResponse, a, b);
  }
}

