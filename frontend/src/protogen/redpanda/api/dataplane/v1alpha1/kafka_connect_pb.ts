// @generated by protoc-gen-es v1.5.0 with parameter "target=ts,import_extension="
// @generated from file redpanda/api/dataplane/v1alpha1/kafka_connect.proto (package redpanda.api.dataplane.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The following states are possible for a connector or one of its tasks
 * implement the state interface described in the Kafka connect API @see
 * https://docs.confluent.io/platform/current/connect/monitoring.html#connector-and-task-status
 * this includes holistic unified connector status that takes into account not
 * just the connector instance state, but also state of all the tasks within the
 * connector
 *
 * @generated from enum redpanda.api.dataplane.v1alpha1.ConnectorHolisticState
 */
export enum ConnectorHolisticState {
  /**
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * PAUSED: The connector/task has been administratively paused.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_PAUSED = 1;
   */
  PAUSED = 1,

  /**
   * RESTARTING: he connector/task is restarting.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_RESTARTING = 2;
   */
  RESTARTING = 2,

  /**
   * DESTROYED: Connector is in destroyed state, regardless of any tasks.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_DESTROYED = 3;
   */
  DESTROYED = 3,

  /**
   * STOPPED: The connector/task has been stopped.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_STOPPED = 4;
   */
  STOPPED = 4,

  /**
   * The connector/task has not yet been assigned to a worker
   * UNASSIGNED: Connector is in unassigned state.
   *    Or Connector is in running state, and there are unassigned tasks.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNASSIGNED = 5;
   */
  UNASSIGNED = 5,

  /**
   * HEALTHY: Connector is in running state, > 0 tasks, all of them in running state.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_HEALTHY = 6;
   */
  HEALTHY = 6,

  /**
   * UNHEALTHY: Connector is failed state.
   * 			Or Connector is in running state but has 0 tasks.
   * 			Or Connector is in running state, has > 0 tasks, and all tasks are in failed state.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNHEALTHY = 7;
   */
  UNHEALTHY = 7,

  /**
   * DEGRADED: Connector is in running state, has > 0 tasks, but has at least one state in failed state, but not all tasks are failed.
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_DEGRADED = 8;
   */
  DEGRADED = 8,

  /**
   * UNKNOWN: The connector/task could no be determined
   *
   * @generated from enum value: CONNECTOR_HOLISTIC_STATE_UNKNOWN = 9;
   */
  UNKNOWN = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(ConnectorHolisticState)
proto3.util.setEnumType(ConnectorHolisticState, "redpanda.api.dataplane.v1alpha1.ConnectorHolisticState", [
  { no: 0, name: "CONNECTOR_HOLISTIC_STATE_UNSPECIFIED" },
  { no: 1, name: "CONNECTOR_HOLISTIC_STATE_PAUSED" },
  { no: 2, name: "CONNECTOR_HOLISTIC_STATE_RESTARTING" },
  { no: 3, name: "CONNECTOR_HOLISTIC_STATE_DESTROYED" },
  { no: 4, name: "CONNECTOR_HOLISTIC_STATE_STOPPED" },
  { no: 5, name: "CONNECTOR_HOLISTIC_STATE_UNASSIGNED" },
  { no: 6, name: "CONNECTOR_HOLISTIC_STATE_HEALTHY" },
  { no: 7, name: "CONNECTOR_HOLISTIC_STATE_UNHEALTHY" },
  { no: 8, name: "CONNECTOR_HOLISTIC_STATE_DEGRADED" },
  { no: 9, name: "CONNECTOR_HOLISTIC_STATE_UNKNOWN" },
]);

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorPlugin
 */
export class ConnectorPlugin extends Message<ConnectorPlugin> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: string class = 3;
   */
  class = "";

  constructor(data?: PartialMessage<ConnectorPlugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ConnectorPlugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "class", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorPlugin {
    return new ConnectorPlugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorPlugin {
    return new ConnectorPlugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorPlugin {
    return new ConnectorPlugin().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorPlugin | PlainMessage<ConnectorPlugin> | undefined, b: ConnectorPlugin | PlainMessage<ConnectorPlugin> | undefined): boolean {
    return proto3.util.equals(ConnectorPlugin, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectCluster
 */
export class ConnectCluster extends Message<ConnectCluster> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectCluster.Info info = 3;
   */
  info?: ConnectCluster_Info;

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ConnectorPlugin plugins = 4;
   */
  plugins: ConnectorPlugin[] = [];

  constructor(data?: PartialMessage<ConnectCluster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ConnectCluster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "info", kind: "message", T: ConnectCluster_Info },
    { no: 4, name: "plugins", kind: "message", T: ConnectorPlugin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectCluster {
    return new ConnectCluster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectCluster {
    return new ConnectCluster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectCluster {
    return new ConnectCluster().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectCluster | PlainMessage<ConnectCluster> | undefined, b: ConnectCluster | PlainMessage<ConnectCluster> | undefined): boolean {
    return proto3.util.equals(ConnectCluster, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectCluster.Info
 */
export class ConnectCluster_Info extends Message<ConnectCluster_Info> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: string commit = 2;
   */
  commit = "";

  /**
   * @generated from field: string kafka_cluster_id = 3;
   */
  kafkaClusterId = "";

  constructor(data?: PartialMessage<ConnectCluster_Info>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ConnectCluster.Info";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kafka_cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectCluster_Info {
    return new ConnectCluster_Info().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectCluster_Info {
    return new ConnectCluster_Info().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectCluster_Info {
    return new ConnectCluster_Info().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectCluster_Info | PlainMessage<ConnectCluster_Info> | undefined, b: ConnectCluster_Info | PlainMessage<ConnectCluster_Info> | undefined): boolean {
    return proto3.util.equals(ConnectCluster_Info, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorStatus
 */
export class ConnectorStatus extends Message<ConnectorStatus> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorStatus.Connector connector = 2;
   */
  connector?: ConnectorStatus_Connector;

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.TaskStatus tasks = 3;
   */
  tasks: TaskStatus[] = [];

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * @generated from field: string trace = 5;
   */
  trace = "";

  constructor(data?: PartialMessage<ConnectorStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ConnectorStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connector", kind: "message", T: ConnectorStatus_Connector },
    { no: 3, name: "tasks", kind: "message", T: TaskStatus, repeated: true },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorStatus {
    return new ConnectorStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorStatus {
    return new ConnectorStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorStatus {
    return new ConnectorStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorStatus | PlainMessage<ConnectorStatus> | undefined, b: ConnectorStatus | PlainMessage<ConnectorStatus> | undefined): boolean {
    return proto3.util.equals(ConnectorStatus, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorStatus.Connector
 */
export class ConnectorStatus_Connector extends Message<ConnectorStatus_Connector> {
  /**
   * @generated from field: string state = 1;
   */
  state = "";

  /**
   * @generated from field: string worker_id = 2;
   */
  workerId = "";

  constructor(data?: PartialMessage<ConnectorStatus_Connector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ConnectorStatus.Connector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "worker_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorStatus_Connector {
    return new ConnectorStatus_Connector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorStatus_Connector {
    return new ConnectorStatus_Connector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorStatus_Connector {
    return new ConnectorStatus_Connector().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorStatus_Connector | PlainMessage<ConnectorStatus_Connector> | undefined, b: ConnectorStatus_Connector | PlainMessage<ConnectorStatus_Connector> | undefined): boolean {
    return proto3.util.equals(ConnectorStatus_Connector, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.TaskStatus
 */
export class TaskStatus extends Message<TaskStatus> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * @generated from field: string worker_id = 3;
   */
  workerId = "";

  /**
   * @generated from field: string trace = 4;
   */
  trace = "";

  constructor(data?: PartialMessage<TaskStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.TaskStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "worker_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "trace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskStatus {
    return new TaskStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskStatus {
    return new TaskStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskStatus {
    return new TaskStatus().fromJsonString(jsonString, options);
  }

  static equals(a: TaskStatus | PlainMessage<TaskStatus> | undefined, b: TaskStatus | PlainMessage<TaskStatus> | undefined): boolean {
    return proto3.util.equals(TaskStatus, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.TaskInfo
 */
export class TaskInfo extends Message<TaskInfo> {
  /**
   * @generated from field: string connector = 1;
   */
  connector = "";

  /**
   * @generated from field: int32 task = 2;
   */
  task = 0;

  constructor(data?: PartialMessage<TaskInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.TaskInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "task", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskInfo {
    return new TaskInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskInfo {
    return new TaskInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskInfo {
    return new TaskInfo().fromJsonString(jsonString, options);
  }

  static equals(a: TaskInfo | PlainMessage<TaskInfo> | undefined, b: TaskInfo | PlainMessage<TaskInfo> | undefined): boolean {
    return proto3.util.equals(TaskInfo, a, b);
  }
}

/**
 * ConnectorError is the error of a connector, this is holistic error
 * abstraction, made parsing the error trace of connector or Task
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorError
 */
export class ConnectorError extends Message<ConnectorError> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorError.Type type = 1;
   */
  type = ConnectorError_Type.UNSPECIFIED;

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<ConnectorError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ConnectorError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ConnectorError_Type) },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorError {
    return new ConnectorError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorError {
    return new ConnectorError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorError {
    return new ConnectorError().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorError | PlainMessage<ConnectorError> | undefined, b: ConnectorError | PlainMessage<ConnectorError> | undefined): boolean {
    return proto3.util.equals(ConnectorError, a, b);
  }
}

/**
 * @generated from enum redpanda.api.dataplane.v1alpha1.ConnectorError.Type
 */
export enum ConnectorError_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_ERROR = 1;
   */
  ERROR = 1,

  /**
   * @generated from enum value: TYPE_WARNING = 2;
   */
  WARNING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConnectorError_Type)
proto3.util.setEnumType(ConnectorError_Type, "redpanda.api.dataplane.v1alpha1.ConnectorError.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_ERROR" },
  { no: 2, name: "TYPE_WARNING" },
]);

/**
 * ConectorInfo is the spec of the connector, as defined in the Kafka connect
 * API, it can be used as input of the connector creation or output of the
 * connectors
 *
 * @generated from message redpanda.api.dataplane.v1alpha1.ConnectorSpec
 */
export class ConnectorSpec extends Message<ConnectorSpec> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: map<string, string> config = 2;
   */
  config: { [key: string]: string } = {};

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.TaskInfo tasks = 3;
   */
  tasks: TaskInfo[] = [];

  /**
   * @generated from field: string type = 4;
   */
  type = "";

  constructor(data?: PartialMessage<ConnectorSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ConnectorSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "tasks", kind: "message", T: TaskInfo, repeated: true },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorSpec {
    return new ConnectorSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorSpec {
    return new ConnectorSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorSpec {
    return new ConnectorSpec().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorSpec | PlainMessage<ConnectorSpec> | undefined, b: ConnectorSpec | PlainMessage<ConnectorSpec> | undefined): boolean {
    return proto3.util.equals(ConnectorSpec, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectorsRequest
 */
export class ListConnectorsRequest extends Message<ListConnectorsRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListConnectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ListConnectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorsRequest | PlainMessage<ListConnectorsRequest> | undefined, b: ListConnectorsRequest | PlainMessage<ListConnectorsRequest> | undefined): boolean {
    return proto3.util.equals(ListConnectorsRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.RestartConnectorRequest
 */
export class RestartConnectorRequest extends Message<RestartConnectorRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.RestartConnectorRequest.Options options = 3;
   */
  options?: RestartConnectorRequest_Options;

  constructor(data?: PartialMessage<RestartConnectorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.RestartConnectorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "options", kind: "message", T: RestartConnectorRequest_Options },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartConnectorRequest {
    return new RestartConnectorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartConnectorRequest {
    return new RestartConnectorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartConnectorRequest {
    return new RestartConnectorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RestartConnectorRequest | PlainMessage<RestartConnectorRequest> | undefined, b: RestartConnectorRequest | PlainMessage<RestartConnectorRequest> | undefined): boolean {
    return proto3.util.equals(RestartConnectorRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.RestartConnectorRequest.Options
 */
export class RestartConnectorRequest_Options extends Message<RestartConnectorRequest_Options> {
  /**
   * @generated from field: bool include_tasks = 1;
   */
  includeTasks = false;

  /**
   * @generated from field: bool only_failed = 2;
   */
  onlyFailed = false;

  constructor(data?: PartialMessage<RestartConnectorRequest_Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.RestartConnectorRequest.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "include_tasks", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "only_failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestartConnectorRequest_Options {
    return new RestartConnectorRequest_Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestartConnectorRequest_Options {
    return new RestartConnectorRequest_Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestartConnectorRequest_Options {
    return new RestartConnectorRequest_Options().fromJsonString(jsonString, options);
  }

  static equals(a: RestartConnectorRequest_Options | PlainMessage<RestartConnectorRequest_Options> | undefined, b: RestartConnectorRequest_Options | PlainMessage<RestartConnectorRequest_Options> | undefined): boolean {
    return proto3.util.equals(RestartConnectorRequest_Options, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.DeleteConnectorRequest
 */
export class DeleteConnectorRequest extends Message<DeleteConnectorRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteConnectorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.DeleteConnectorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteConnectorRequest {
    return new DeleteConnectorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteConnectorRequest {
    return new DeleteConnectorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteConnectorRequest {
    return new DeleteConnectorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteConnectorRequest | PlainMessage<DeleteConnectorRequest> | undefined, b: DeleteConnectorRequest | PlainMessage<DeleteConnectorRequest> | undefined): boolean {
    return proto3.util.equals(DeleteConnectorRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.PauseConnectorRequest
 */
export class PauseConnectorRequest extends Message<PauseConnectorRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<PauseConnectorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.PauseConnectorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PauseConnectorRequest {
    return new PauseConnectorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PauseConnectorRequest {
    return new PauseConnectorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PauseConnectorRequest {
    return new PauseConnectorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PauseConnectorRequest | PlainMessage<PauseConnectorRequest> | undefined, b: PauseConnectorRequest | PlainMessage<PauseConnectorRequest> | undefined): boolean {
    return proto3.util.equals(PauseConnectorRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ResumeConnectorRequest
 */
export class ResumeConnectorRequest extends Message<ResumeConnectorRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ResumeConnectorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ResumeConnectorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResumeConnectorRequest {
    return new ResumeConnectorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResumeConnectorRequest {
    return new ResumeConnectorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResumeConnectorRequest {
    return new ResumeConnectorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResumeConnectorRequest | PlainMessage<ResumeConnectorRequest> | undefined, b: ResumeConnectorRequest | PlainMessage<ResumeConnectorRequest> | undefined): boolean {
    return proto3.util.equals(ResumeConnectorRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectorRequest
 */
export class GetConnectorRequest extends Message<GetConnectorRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetConnectorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.GetConnectorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectorRequest {
    return new GetConnectorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectorRequest {
    return new GetConnectorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectorRequest {
    return new GetConnectorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectorRequest | PlainMessage<GetConnectorRequest> | undefined, b: GetConnectorRequest | PlainMessage<GetConnectorRequest> | undefined): boolean {
    return proto3.util.equals(GetConnectorRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.CreateConnectorRequest
 */
export class CreateConnectorRequest extends Message<CreateConnectorRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec connector = 2;
   */
  connector?: ConnectorSpec;

  constructor(data?: PartialMessage<CreateConnectorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.CreateConnectorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "connector", kind: "message", T: ConnectorSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateConnectorRequest {
    return new CreateConnectorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateConnectorRequest {
    return new CreateConnectorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateConnectorRequest {
    return new CreateConnectorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateConnectorRequest | PlainMessage<CreateConnectorRequest> | undefined, b: CreateConnectorRequest | PlainMessage<CreateConnectorRequest> | undefined): boolean {
    return proto3.util.equals(CreateConnectorRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectorResponse
 */
export class GetConnectorResponse extends Message<GetConnectorResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec connector = 1;
   */
  connector?: ConnectorSpec;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorHolisticState holistic_state = 4;
   */
  holisticState = ConnectorHolisticState.UNSPECIFIED;

  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ConnectorError errors = 5;
   */
  errors: ConnectorError[] = [];

  constructor(data?: PartialMessage<GetConnectorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.GetConnectorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector", kind: "message", T: ConnectorSpec },
    { no: 4, name: "holistic_state", kind: "enum", T: proto3.getEnumType(ConnectorHolisticState) },
    { no: 5, name: "errors", kind: "message", T: ConnectorError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectorResponse {
    return new GetConnectorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectorResponse {
    return new GetConnectorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectorResponse {
    return new GetConnectorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectorResponse | PlainMessage<GetConnectorResponse> | undefined, b: GetConnectorResponse | PlainMessage<GetConnectorResponse> | undefined): boolean {
    return proto3.util.equals(GetConnectorResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.CreateConnectorResponse
 */
export class CreateConnectorResponse extends Message<CreateConnectorResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec connector = 1;
   */
  connector?: ConnectorSpec;

  constructor(data?: PartialMessage<CreateConnectorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.CreateConnectorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector", kind: "message", T: ConnectorSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateConnectorResponse {
    return new CreateConnectorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateConnectorResponse {
    return new CreateConnectorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateConnectorResponse {
    return new CreateConnectorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateConnectorResponse | PlainMessage<CreateConnectorResponse> | undefined, b: CreateConnectorResponse | PlainMessage<CreateConnectorResponse> | undefined): boolean {
    return proto3.util.equals(CreateConnectorResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectorsResponse
 */
export class ListConnectorsResponse extends Message<ListConnectorsResponse> {
  /**
   * connectors is the list of connectors the key is the connector name
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ListConnectorsResponse.ConnectorInfoStatus connectors = 1;
   */
  connectors: ListConnectorsResponse_ConnectorInfoStatus[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListConnectorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ListConnectorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connectors", kind: "message", T: ListConnectorsResponse_ConnectorInfoStatus, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorsResponse | PlainMessage<ListConnectorsResponse> | undefined, b: ListConnectorsResponse | PlainMessage<ListConnectorsResponse> | undefined): boolean {
    return proto3.util.equals(ListConnectorsResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectorsResponse.ConnectorInfoStatus
 */
export class ListConnectorsResponse_ConnectorInfoStatus extends Message<ListConnectorsResponse_ConnectorInfoStatus> {
  /**
   * name is the connector name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorSpec info = 2;
   */
  info?: ConnectorSpec;

  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorStatus status = 3;
   */
  status?: ConnectorStatus;

  /**
   * holistic_state of all the tasks within the connector this is our internal
   * holistic state concept
   *
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectorHolisticState holistic_state = 4;
   */
  holisticState = ConnectorHolisticState.UNSPECIFIED;

  /**
   * Errors is list of parsed connectors' and tasks' errors
   *
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ConnectorError errors = 5;
   */
  errors: ConnectorError[] = [];

  constructor(data?: PartialMessage<ListConnectorsResponse_ConnectorInfoStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ListConnectorsResponse.ConnectorInfoStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "info", kind: "message", T: ConnectorSpec },
    { no: 3, name: "status", kind: "message", T: ConnectorStatus },
    { no: 4, name: "holistic_state", kind: "enum", T: proto3.getEnumType(ConnectorHolisticState) },
    { no: 5, name: "errors", kind: "message", T: ConnectorError, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorsResponse_ConnectorInfoStatus {
    return new ListConnectorsResponse_ConnectorInfoStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorsResponse_ConnectorInfoStatus {
    return new ListConnectorsResponse_ConnectorInfoStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorsResponse_ConnectorInfoStatus {
    return new ListConnectorsResponse_ConnectorInfoStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorsResponse_ConnectorInfoStatus | PlainMessage<ListConnectorsResponse_ConnectorInfoStatus> | undefined, b: ListConnectorsResponse_ConnectorInfoStatus | PlainMessage<ListConnectorsResponse_ConnectorInfoStatus> | undefined): boolean {
    return proto3.util.equals(ListConnectorsResponse_ConnectorInfoStatus, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectClusterRequest
 */
export class GetConnectClusterRequest extends Message<GetConnectClusterRequest> {
  /**
   * @generated from field: string cluster_name = 1;
   */
  clusterName = "";

  constructor(data?: PartialMessage<GetConnectClusterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.GetConnectClusterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectClusterRequest {
    return new GetConnectClusterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectClusterRequest {
    return new GetConnectClusterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectClusterRequest {
    return new GetConnectClusterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectClusterRequest | PlainMessage<GetConnectClusterRequest> | undefined, b: GetConnectClusterRequest | PlainMessage<GetConnectClusterRequest> | undefined): boolean {
    return proto3.util.equals(GetConnectClusterRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.GetConnectClusterResponse
 */
export class GetConnectClusterResponse extends Message<GetConnectClusterResponse> {
  /**
   * @generated from field: redpanda.api.dataplane.v1alpha1.ConnectCluster cluster = 1;
   */
  cluster?: ConnectCluster;

  constructor(data?: PartialMessage<GetConnectClusterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.GetConnectClusterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cluster", kind: "message", T: ConnectCluster },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectClusterResponse {
    return new GetConnectClusterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectClusterResponse {
    return new GetConnectClusterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectClusterResponse {
    return new GetConnectClusterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectClusterResponse | PlainMessage<GetConnectClusterResponse> | undefined, b: GetConnectClusterResponse | PlainMessage<GetConnectClusterResponse> | undefined): boolean {
    return proto3.util.equals(GetConnectClusterResponse, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectClustersRequest
 */
export class ListConnectClustersRequest extends Message<ListConnectClustersRequest> {
  constructor(data?: PartialMessage<ListConnectClustersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ListConnectClustersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectClustersRequest {
    return new ListConnectClustersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectClustersRequest {
    return new ListConnectClustersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectClustersRequest {
    return new ListConnectClustersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectClustersRequest | PlainMessage<ListConnectClustersRequest> | undefined, b: ListConnectClustersRequest | PlainMessage<ListConnectClustersRequest> | undefined): boolean {
    return proto3.util.equals(ListConnectClustersRequest, a, b);
  }
}

/**
 * @generated from message redpanda.api.dataplane.v1alpha1.ListConnectClustersResponse
 */
export class ListConnectClustersResponse extends Message<ListConnectClustersResponse> {
  /**
   * @generated from field: repeated redpanda.api.dataplane.v1alpha1.ConnectCluster clusters = 1;
   */
  clusters: ConnectCluster[] = [];

  constructor(data?: PartialMessage<ListConnectClustersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "redpanda.api.dataplane.v1alpha1.ListConnectClustersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "message", T: ConnectCluster, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectClustersResponse {
    return new ListConnectClustersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectClustersResponse {
    return new ListConnectClustersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectClustersResponse {
    return new ListConnectClustersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectClustersResponse | PlainMessage<ListConnectClustersResponse> | undefined, b: ListConnectClustersResponse | PlainMessage<ListConnectClustersResponse> | undefined): boolean {
    return proto3.util.equals(ListConnectClustersResponse, a, b);
  }
}

