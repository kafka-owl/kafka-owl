syntax = "proto3";

package redpanda.api.dataplane.v1alpha1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

message ACL {
  enum ResourceType {
    RESOURCE_TYPE_UNSPECIFIED = 0;
    RESOURCE_TYPE_ANY = 1;
    RESOURCE_TYPE_TOPIC = 2;
    RESOURCE_TYPE_GROUP = 3;
    RESOURCE_TYPE_CLUSTER = 4;
    RESOURCE_TYPE_TRANSACTIONAL_ID = 5;
    RESOURCE_TYPE_DELEGATION_TOKEN = 6;
    RESOURCE_TYPE_USER = 7;
  }

  enum ResourcePatternType {
    RESOURCE_PATTERN_TYPE_UNSPECIFIED = 0;
    RESOURCE_PATTERN_TYPE_ANY = 1;
    RESOURCE_PATTERN_TYPE_MATCH = 2;
    RESOURCE_PATTERN_TYPE_LITERAL = 3;
    RESOURCE_PATTERN_TYPE_PREFIXED = 4;
  }

  enum Operation {
    OPERATION_UNSPECIFIED = 0;
    OPERATION_ANY = 1;
    OPERATION_ALL = 2;
    OPERATION_READ = 3;
    OPERATION_WRITE = 4;
    OPERATION_CREATE = 5;
    OPERATION_DELETE = 6;
    OPERATION_ALTER = 7;
    OPERATION_DESCRIBE = 8;
    OPERATION_CLUSTER_ACTION = 9;
    OPERATION_DESCRIBE_CONFIGS = 10;
    OPERATION_ALTER_CONFIGS = 11;
    OPERATION_IDEMPOTENT_WRITE = 12;
    OPERATION_CREATE_TOKENS = 13;
    OPERATION_DESCRIBE_TOKENS = 14;
  }

  enum PermissionType {
    PERMISSION_TYPE_UNSPECIFIED = 0;
    PERMISSION_TYPE_ANY = 1;
    PERMISSION_TYPE_DENY = 2;
    PERMISSION_TYPE_ALLOW = 3;
  }

  message Filter {
    ACL.ResourceType resource_type = 1 [(buf.validate.field).enum.defined_only = true];
    optional string resource_name = 2;
    ACL.ResourcePatternType resource_pattern_type = 3 [(buf.validate.field).enum.defined_only = true];
    optional string principal = 4;
    optional string host = 5;
    ACL.Operation operation = 6 [(buf.validate.field).enum.defined_only = true];
    ACL.PermissionType permission_type = 7 [(buf.validate.field).enum.defined_only = true];
  }
}

message ListACLsRequest {
  ACL.Filter filter = 1;
  int32 page_size = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Limit the paginated response to a number of items.",
    minimum: 1,
    maximum: 100
  }];
  // Value of the next_page_token field returned by the previous response.
  // If not provided, the system assumes the first page is requested.
  string page_token = 3;
}

message ListACLsResponse {
  message Policy {
    string principal = 1;
    string host = 2;
    ACL.Operation operation = 3;
    ACL.PermissionType permission_type = 4;
  }

  message Resource {
    ACL.ResourceType resource_type = 1;
    string resource_name = 2;
    ACL.ResourcePatternType resource_pattern_type = 3;
    repeated Policy acls = 4;
  }

  repeated Resource resources = 1;
}

message CreateACLRequest {
  option (buf.validate.message).cel = {
    id: "resource_name_must_be_set_except_for_cluster_resource_type",
    expression:
      "this.resource_type == 4 && size(this.resource_name) == 0 ? ''"
      ": this.resource_type == 4 && this.resource_name != 'kafka-cluster' ? 'Field resource_name must be set to \"kafka-cluster\" or empty when using resource_type=CLUSTER'"
      ": this.resource_type != 4 && size(this.resource_name) == 0 ? 'Field resource_name must be set'"
      ": ''",
  };

  // ResourceType determines the type of the resource (Topic, ConsumerGroup etc) this
  // ACL shall target.
  ACL.ResourceType resource_type = 1 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [
        0,
        1
      ] /* Disallow: Unspecified and ANY */
    },
    (buf.validate.field).required = true
  ];

  // ResourceName is the name of the resource this acl entry will be on.
  // For requests with resource_type CLUSTER, this will default to the expected
  // value "kafka-cluster".
  string resource_name = 2;

  // ResourcePattern type determines the strategy how the provided resource_name
  // is matched (exact match, prefixed, ...) against the actual resource names.
  ACL.ResourcePatternType resource_pattern_type = 3 [
    (buf.validate.field).enum = {
      defined_only: true,
      in: [
        3,
        4
      ], // Only allow: LITERAL or PREFIXED
    },
    (buf.validate.field).required = true
  ];

  // Principal is the user to apply this acl for. With the Kafka simple
  // authorizer, this must begin with "User:".
  string principal = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.prefix = "User:"
  ];

  // Host is the host address to use for this acl. Each host to allow
  // the principal access from must be specified as a new creation.
  string host = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "wildcard_or_ip_address",
      message: "Field host must be either wildcard (*) or a valid IP address.",
      expression: "this == '*' ? true : this.isIp()"
    }
  ];

  // Operation is the operation that shall be allowed (e.g. READ).
  ACL.Operation operation = 6 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [
        0,
        1
      ] /* Disallow: Unspecified and ANY */
    },
    (buf.validate.field).required = true
  ];

  // PermissionType determines whether the operation should be allowed or denied.
  ACL.PermissionType permission_type = 7 [
    (buf.validate.field).enum = {
      defined_only: true,
      in: [
        2,
        3
      ] /* Allow or Deny */
    },
    (buf.validate.field).required = true
  ];
}

message CreateACLResponse {}

message DeleteACLsRequest {
  ACL.Filter filter = 1;
}

message DeleteACLsResponse {
  message MatchingACL {
    ACL.ResourceType resource_type = 1;
    string resource_name = 2;
    ACL.ResourcePatternType resource_pattern_type = 3;
    string principal = 4;
    string host = 5;
    ACL.Operation operation = 6;
    ACL.PermissionType permission_type = 7;
    int32 error_code = 8;
    string error_message = 9;
  }

  repeated MatchingACL matching_acls = 1;
}

service ACLService {
  rpc ListACLs(ListACLsRequest) returns (ListACLsResponse) {
    option (google.api.http) = {get: "/v1alpha1/acls"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List ACLs"
      description: "List ACLs"
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ListACLsResponse"}
          }
        }
      }
    };
  }

  rpc CreateACL(CreateACLRequest) returns (CreateACLResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/acls",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create ACL"
      description: "Create ACL"
      responses: {
        key: "201"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.CreateACLResponse"}
          }
        }
      }
    };
  }

  rpc DeleteACLs(DeleteACLsRequest) returns (DeleteACLsResponse) {
    option (google.api.http) = {delete: "/v1alpha1/acls"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete ACLs"
      description: "Delete all ACLs that match the given filter"
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.DeleteACLsResponse"}
          }
        }
      }
    };
  }
}
