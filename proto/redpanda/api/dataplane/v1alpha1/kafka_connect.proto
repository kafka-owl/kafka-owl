syntax = "proto3";

package redpanda.api.dataplane.v1alpha1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// The following states are possible for a connector or one of its tasks
// implement the state interface described in the Kafka connect API @see
// https://docs.confluent.io/platform/current/connect/monitoring.html#connector-and-task-status
// this includes holistic unified connector status that takes into account not
// just the connector instance state, but also state of all the tasks within the
// connector
enum ConnectorHolisticState {
  CONNECTOR_HOLISTIC_STATE_UNSPECIFIED = 0;
  // PAUSED: The connector/task has been administratively paused.
  CONNECTOR_HOLISTIC_STATE_PAUSED = 1;
  // RESTARTING: he connector/task is restarting.
  CONNECTOR_HOLISTIC_STATE_RESTARTING = 2;
  // DESTROYED: Connector is in destroyed state, regardless of any tasks.
  CONNECTOR_HOLISTIC_STATE_DESTROYED = 3;
  // STOPPED: The connector/task has been stopped.
  CONNECTOR_HOLISTIC_STATE_STOPPED = 4;
  // The connector/task has not yet been assigned to a worker
  // UNASSIGNED: Connector is in unassigned state.
  //    Or Connector is in running state, and there are unassigned tasks.
  CONNECTOR_HOLISTIC_STATE_UNASSIGNED = 5;
  // HEALTHY: Connector is in running state, > 0 tasks, all of them in running state.
  CONNECTOR_HOLISTIC_STATE_HEALTHY = 6;
  // UNHEALTHY: Connector is failed state.
  //			Or Connector is in running state but has 0 tasks.
  // 			Or Connector is in running state, has > 0 tasks, and all tasks are in failed state.
  CONNECTOR_HOLISTIC_STATE_UNHEALTHY = 7;
  // DEGRADED: Connector is in running state, has > 0 tasks, but has at least one state in failed state, but not all tasks are failed.
  CONNECTOR_HOLISTIC_STATE_DEGRADED = 8;
  // UNKNOWN: The connector/task could no be determined
  CONNECTOR_HOLISTIC_STATE_UNKNOWN = 9;
}

message ConnectorPlugin {
  string type = 1;
  string version = 2;
  string class = 3;
}

message ConnectCluster {
  message Info {
    string version = 1;
    string commit = 2;
    string kafka_cluster_id = 3;
  }
  string name = 1;
  string address = 2;
  Info info = 3;
  repeated ConnectorPlugin plugins = 4;
}

message ConnectorStatus {
  message Connector {
    string state = 1;
    string worker_id = 2;
    string trace = 3;
  }
  string name = 1;
  Connector connector = 2;
  repeated TaskStatus tasks = 3;
  string type = 4;
  // holistic_state of all the tasks within the connector this is our internal
  // holistic state concept
  ConnectorHolisticState holistic_state = 5;
  // Errors is list of parsed connectors' and tasks' errors
  repeated ConnectorError errors = 6;
}

message TaskStatus {
  int32 id = 1;
  string state = 2;
  string worker_id = 3;
  string trace = 4;
}

message TaskInfo {
  string connector = 1;
  int32 task = 2;
}

// ConnectorError is the error of a connector, this is holistic error
// abstraction, made parsing the error trace of connector or Task
message ConnectorError {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_ERROR = 1;
    TYPE_WARNING = 2;
  }
  Type type = 1;
  string title = 2;
  string content = 3;
}

// ConectorInfo is the spec of the connector, as defined in the Kafka connect
// API, it can be used as input of the connector creation or output of the
// connectors
message ConnectorSpec {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];

  map<string, string> config = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
  repeated TaskInfo tasks = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  string type = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message ListConnectorsRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];
  // Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
  string page_token = 2;
  int32 page_size = 3 [
    (buf.validate.field).int32 = {
      gte: -1,
      lte: 1000
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Limit the paginated response to a number of items. Defaults to 100. Use -1 to disable pagination.",
      minimum: -1,
      maximum: 1000
    }
  ];
}

message RestartConnectorRequest {
  message Options {
    bool include_tasks = 1;
    bool only_failed = 2;
  }
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];

  Options options = 3;
}

message DeleteConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message PauseConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message ResumeConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message StopConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message GetConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message CreateConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];
  ConnectorSpec connector = 2;
}

message GetConnectorResponse {
  ConnectorSpec connector = 1;
}

message CreateConnectorResponse {
  ConnectorSpec connector = 1;
}

message ListConnectorsResponse {
  message ConnectorInfoStatus {
    // name is the connector name
    string name = 1;
    ConnectorSpec info = 2;
    ConnectorStatus status = 3;
  }

  // connectors is the list of connectors the key is the connector name
  repeated ConnectorInfoStatus connectors = 1;
  string next_page_token = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "Page Token to fetch the next page. The value can be used as page_token in the next call to this endpoint."}];
}

message GetConnectClusterRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];
}

message GetConnectClusterResponse {
  ConnectCluster cluster = 1;
}

message ListConnectClustersRequest {}

message ListConnectClustersResponse {
  repeated ConnectCluster clusters = 1;
}

message UpsertConnectorRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];

  map<string, string> config = 3 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
}

message UpsertConnectorResponse {
  ConnectorSpec connector = 1;
}

message GetConnectorConfigRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message GetConnectorConfigResponse {
  map<string, string> config = 1;
}

message GetConnectorStatusRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message GetConnectorStatusResponse {
  ConnectorStatus status = 1;
}

message ListConnectorTopicsRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

message ListConnectorTopicsResponse {
  repeated string topics = 1 [(google.api.field_behavior) = UNORDERED_LIST];
}

message ResetConnectorTopicsRequest {
  string cluster_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 128,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9-_]+$",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Unique name of target connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`.",
      example: "\"redpanda\"",
      field_configuration: {path_param_name: "cluster_name"}
    }
  ];

  string name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 1024,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9!@#$%^&*()-_=+;:'\"`~,<.>/?|\\-]+$"
  ];
}

// KafkaConnectService is the service for the Kafka connect, it exposes the
// Kafka Connect API, you can set multiple Kafka connect services and all of
// them can be managed using this service definition, the request is not only
// proxied but also enriched with better error handling and custom
// documentation and configuration
service KafkaConnectService {
  // ListConnectClusters implements the list clusters method, list connect
  // clusters available in the console configuration
  rpc ListConnectClusters(ListConnectClustersRequest) returns (ListConnectClustersResponse) {
    option (google.api.http) = {get: "/v1alpha1/connect/clusters"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List connect clusters"
      description: "List connect clusters available for being consumed by the console's kafka-connect service."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ListConnectClustersResponse"}
          }
        }
      }
    };
  }

  // GetConnectCluster implements the get cluster info method, exposes a Kafka
  // Connect equivalent REST endpoint
  rpc GetConnectCluster(GetConnectClusterRequest) returns (GetConnectClusterResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/connect/clusters/{cluster_name}"
      response_body: "cluster"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connect cluster"
      description: "Get information about an available Kafka Connect cluster. For Redpanda self-hosted deployments, use the cluster name defined in the console's configuration file. For Redpanda Cloud, use `redpanda`."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ConnectCluster"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Connect cluster not found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }

  // ListConnectors implements the list connectors method, exposes a Kafka
  // Connect equivalent REST endpoint
  rpc ListConnectors(ListConnectorsRequest) returns (ListConnectorsResponse) {
    option (google.api.http) = {get: "/v1alpha1/connect/clusters/{cluster_name}/connectors"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List connectors"
      description: "List connectors managed by the Kafka Connect service."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ListConnectorsResponse"}
          }
        }
      }
    };
  }

  // CreateConnector implements the create connector method, and exposes an
  // equivalent REST endpoint as the Kafka connect API endpoint
  rpc CreateConnector(CreateConnectorRequest) returns (CreateConnectorResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/connect/clusters/{cluster_name}/connectors"
      body: "connector"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create connector"
      description: "Create a connector with the specified configuration."
      responses: {
        key: "201"
        value: {
          description: "Created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ConnectorSpec"}
          }
        }
      }
    };
  }

  // RestartConnector implements the restart connector method, exposes a Kafka
  // Connect equivalent REST endpoint
  rpc RestartConnector(RestartConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/restart"
      body: "options"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Restart connector"
      description: "Restarts a connector, triggers a connector restart, you can specify the only_failed or/and the include_tasks options."
      responses: {
        key: "204"
        value: {
          description: "Restart connector request success"
          schema: {}
        }
      }
    };
  }

  // GetConnector implements the get connector method, exposes a Kafka
  // Connect equivalent REST endpoint
  rpc GetConnector(GetConnectorRequest) returns (GetConnectorResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connector"
      description: "Get information about a connector in a specific cluster."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ConnectorSpec"}
          }
        }
      }
    };
  }

  // GetConnectorStatus implement the get status method, Gets the current status of the connector, including:
  // Whether it is running or restarting, or if it has failed or paused
  // Which worker it is assigned to
  // Error information if it has failed
  // The state of all its tasks
  rpc GetConnectorStatus(GetConnectorStatusRequest) returns (GetConnectorStatusResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/status"
      response_body: "status"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connector status"
      description: "Gets the current status of the connector, including the state for each of its tasks, error information, etc."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ConnectorStatus"}
          }
        }
      }
    };
  }

  // PauseConnector implements the pause connector method, exposes a Kafka
  // connect equivalent REST endpoint
  rpc PauseConnector(PauseConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/pause"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Pause connector"
      description: "Pause the connector and its tasks, which stops messages from processing until the connector is resumed. This call is asynchronous and may take some time to process."
      responses: {
        key: "202"
        value: {
          description: "Pause request accepted"
          schema: {}
        }
      }
    };
  }

  // ResumeConnector implements the resume connector method, exposes a Kafka
  // connect equivalent REST endpoint
  rpc ResumeConnector(ResumeConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/resume"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Resume connector"
      description: "Resume a paused connector and its tasks, and resumes message processing. This call is asynchronous and may take some time to process. If the connector was not paused, this operation does not do anything."
      responses: {
        key: "202"
        value: {
          description: "Resume request accepted"
          schema: {}
        }
      }
    };
  }

  // StopConnector implements the stop connector method, exposes a Kafka
  // connect equivalent REST endpoint it stops the connector but does not
  // delete the connector. All tasks for the connector are shut down completely
  rpc StopConnector(StopConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/stop"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Stop connector"
      description: "Stops a connector, but does not delete the connector. All tasks for the connector are shut down completely. This call is asynchronous and may take some time to process."
      responses: {
        key: "202"
        value: {
          description: "Request accepted"
          schema: {}
        }
      }
    };
  }

  // DeleteConnector implements the delete connector method, exposes a Kafka
  // connect equivalent REST endpoint
  rpc DeleteConnector(DeleteConnectorRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete connector"
      description: "Delete a connector. This operation force stops all tasks and also deletes the connector configuration."
      responses: {
        key: "204"
        value: {
          description: "Deleted"
          schema: {}
        }
      }
    };
  }

  // UpsertConector implements the update or create connector method, it
  // exposes a kafka connect equivalent REST endpoint
  rpc UpsertConnector(UpsertConnectorRequest) returns (UpsertConnectorResponse) {
    option (google.api.http) = {
      put: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/config"
      body: "config"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Upsert connector configuration"
      description: "Create a new connector using the given configuration, or update the configuration for an existing connector. Returns information about the connector after the change has been made."
      responses: {
        key: "200"
        value: {
          description: "Updated"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ConnectorSpec"}
          }
        }
      }
      responses: {
        key: "201"
        value: {
          description: "Created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ConnectorSpec"}
          }
        }
      }
    };
  }

  // GetConnectorConfig implements the get connector configuration method, expose a kafka connect equivalent REST endpoint
  rpc GetConnectorConfig(GetConnectorConfigRequest) returns (GetConnectorConfigResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/config"
      response_body: "config"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get connector configuration"
      description: "Get the configuration for the connector."
    };
  }

  // ListConnectorTopics implements the list connector topics method, expose a kafka connect equivalent REST endpoint
  rpc ListConnectorTopics(ListConnectorTopicsRequest) returns (ListConnectorTopicsResponse) {
    option (google.api.http) = {get: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/topics"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List connector topics"
      description: "Returns a list of connector topic names. If the connector is inactive, this call returns an empty list."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ListConnectorTopicsResponse"}
          }
        }
      }
    };
  }

  // ResetConnectorTopics implements the reset connector topics method, expose a kafka connect equivalent REST endpoint
  // the request body is empty.
  rpc ResetConnectorTopics(ResetConnectorTopicsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {put: "/v1alpha1/connect/clusters/{cluster_name}/connectors/{name}/topics/reset"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Reset connector topics"
      description: "Resets the set of topic names that the connector is using."
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {}
        }
      }
    };
  }
}
