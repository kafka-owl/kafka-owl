syntax = "proto3";

package redpanda.api.dataplane.v1alpha1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "redpanda/api/dataplane/v1alpha1/common.proto";

message Topic {
  message Configuration {
    string name = 1;
    ConfigType type = 2;
    optional string value = 3;
    ConfigSource source = 4;
    bool read_only = 5;
    bool sensitive = 6;
    repeated ConfigSynonym config_synonyms = 7;
    optional string documentation = 8;
  }
}

message CreateTopicRequest {
  message Topic {
    message Config {
      // Name is a topic level config key (e.g. segment.bytes).
      string name = 1 [
        (buf.validate.field).string.min_len = 1,
        (buf.validate.field).string.max_len = 255,
        (buf.validate.field).string.pattern = "^[a-z0-9.]+$"
      ];

      // Value is a topic level config value (e.g. 1073741824)
      optional string value = 2;
    }

    message ReplicaAssignment {
      // Partition is a partition to create.
      int32 partition_id = 1;

      // Replicas are the broker IDs the partition must exist on.
      repeated int32 replica_ids = 2;
    }

    // Name is the topic's name.
    string name = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 249,
      (buf.validate.field).string.pattern = "^[a-zA-Z0-9._\\-]*$"
    ];

    // NumPartitions is how many partitions to give a topic. This must
    // be null if specifying partitions manually (see ReplicaAssignment)
    // or, to use the cluster default partitions.
    optional int32 partition_count = 2;

    // ReplicationFactor is how many replicas every partition must have.
    // This must be null if specifying partitions manually (see ReplicaAssignment)
    // or, to use the cluster default replication factor.
    optional int32 replication_factor = 3 [
      (buf.validate.field).int32.gte = 1,
      (buf.validate.field).int32.lte = 5
    ];

    // ReplicaAssignment is an array to manually dictate replicas and their
    // partitions for a topic. If using this, both ReplicationFactor and
    // NumPartitions must be -1.
    repeated ReplicaAssignment replica_assignments = 4;

    // Configs is an array of key value config pairs for a topic.
    // These correspond to Kafka Topic-Level Configs.
    repeated Config configs = 5;
  }

  // Topic is the topic to attempt to create.
  Topic topic = 1 [(buf.validate.field).required = true];

  // ValidateOnly makes this request a dry-run; everything is validated but
  // no topics are actually created.
  bool validate_only = 2;
}

message CreateTopicResponse {
  // Name is the topic's name.
  string name = 1;

  // NumPartitions is how many partitions were created for this topic.
  // This field has a default of -1, which may be returned if the broker
  // does not support v5+ of this request which added support for returning
  // this information.
  // This is currently commented, until
  // int32 num_partitions = 2;

  // ReplicationFactor is how many replicas every partition has for this topic.
  // This field has a default of -1, which may be returned if the broker
  // does not support v5+ of this request which added support for returning
  // this information.
  // int32 replication_factor = 3;
}

message ListTopicsRequest {
  message Filter {
    string name_contains = 1 [
      (buf.validate.field).string.max_len = 249,
      (buf.validate.field).string.pattern = "^[a-zA-Z0-9._\\-]*$"
    ];
  }
  Filter filter = 1;
  int32 page_size = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Limit the paginated response to a number of items.",
    minimum: 1,
    maximum: 100
  }];
  // Value of the next_page_token field returned by the previous response. If not provided, the system assumes the first page is requested.
  string page_token = 3;
}

message ListTopicsResponse {
  message Topic {
    string name = 1;
    bool internal = 2;
    int32 partition_count = 3;
    int32 replication_factor = 4;
  }
  repeated ListTopicsResponse.Topic topics = 1;
  string next_page_token = 2;
}

message DeleteTopicRequest {
  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 249,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9._\\-]*$"
  ];
}

message DeleteTopicResponse {}

message GetTopicConfigurationsRequest {
  string topic_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 249,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9._\\-]*$"
  ];
}

message GetTopicConfigurationsResponse {
  repeated Topic.Configuration configurations = 1;
}

message UpdateTopicConfigurationsRequest {
  message UpdateConfiguration {
    string name = 1 [
      (buf.validate.field).required = true,
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.max_len = 249
    ];
    optional string value = 2;
    ConfigAlterOperation operation = 3 [
      (buf.validate.field).required = true,
      (buf.validate.field).enum = {
        defined_only: true,
        not_in: [0]
      }
    ];
  }
  string topic_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 249,
    (buf.validate.field).string.pattern = "^[a-zA-Z0-9._\\-]*$"
  ];
  repeated UpdateConfiguration configurations = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated.min_items = 1
  ];
}

message UpdateTopicConfigurationsResponse {
  // Topic's complete set of configurations after this partial patch has been applied.
  repeated Topic.Configuration configurations = 1;
}

message SetTopicConfigurationsRequest {
  message SetConfiguration {
    string name = 1;
    optional string value = 2;
  }
  string topic_name = 1;
  repeated SetConfiguration configurations = 2;
}

message SetTopicConfigurationsResponse {
  repeated Topic.Configuration configurations = 1;
}

service TopicService {
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/topics"
      body: "topic"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create Topic"
      description: "Create a Topic."
      responses: {
        key: "201"
        value: {
          description: "Topic Created"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.Topic"}
          }
        }
      }
    };
  }
  rpc ListTopics(ListTopicsRequest) returns (ListTopicsResponse) {
    option (google.api.http) = {get: "/v1alpha1/topics"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Topics"
      description: "List Topics"
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.ListTopicsResponse"}
          }
        }
      }
    };
  }
  rpc DeleteTopic(DeleteTopicRequest) returns (DeleteTopicResponse) {
    option (google.api.http) = {delete: "/v1alpha1/topics/{name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a Kafka topic"
      description: "Deletes the Kafka topic with the requested name."
      responses: {
        key: "204"
        value: {
          description: "Topic was deleted successfully"
          schema: {}
        }
      }
      responses: {
        key: "404"
        value: {
          description: "The requested topic does not exist"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
  rpc GetTopicConfigurations(GetTopicConfigurationsRequest) returns (GetTopicConfigurationsResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/topics/{topic_name}/configurations"
      response_body: "configurations"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Topic Configurations"
      description: "Get Topic Configurations."
      responses: {
        key: "200"
        value: {
          description: "Ok"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.GetTopicConfigurationsResponse"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
  rpc UpdateTopicConfigurations(UpdateTopicConfigurationsRequest) returns (UpdateTopicConfigurationsResponse) {
    option (google.api.http) = {
      patch: "/v1alpha1/topics/{topic_name}/configurations"
      body: "configurations"
      response_body: "configurations"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update Topic Configuration"
      description: "Updates a subset of the topic configuration."
      responses: {
        key: "200"
        value: {
          description: "Ok"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.UpdateTopicConfigurationsResponse"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
  rpc SetTopicConfigurations(SetTopicConfigurationsRequest) returns (SetTopicConfigurationsResponse) {
    option (google.api.http) = {
      put: "/v1alpha1/topics/{topic_name}/configurations"
      body: "configurations"
      response_body: "configurations"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Set Topic Configurations"
      description: "Set the entire set of configurations for a topic. Config entries that are not provided in the request are removed and will fall-back to their default values."
      responses: {
        key: "200"
        value: {
          description: "Ok"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha1.SetTopicConfigurationsResponse"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
}
