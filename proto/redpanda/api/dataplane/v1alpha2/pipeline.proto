syntax = "proto3";

package redpanda.api.dataplane.v1alpha2;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

message Pipeline {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];

  string display_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];

  string description = 3 [(buf.validate.field).string.max_len = 256];

  // The configuration of the Pipeline as YAML.
  // See https://docs.redpanda.com/redpanda-connect/configuration/about/
  string config_yaml = 4 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The configuration of the Pipeline as YAML. See https://docs.redpanda.com/redpanda-connect/configuration/about for more details."}
  ];

  // The minimum amount of resources needed for the pipeline to run
  Resources request = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The minimum amount of resources needed for the pipeline to run."}];

  // The maximum amount of resources that should be assigned to the pipeline
  Resources limit = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "The maximum amount of resources that should be assigned to the pipeline."}];

  State state = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  Status status = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  message Resources {
    // memory_shares is a string specifying the amount of memory to allocate for
    // the pipeline.
    //
    // This follows the Kubernetes resource quantity format. Acceptable units
    // include:
    // - Decimal SI units: "K", "M", "G", "T", "P", "E" (e.g., "128M" for 128
    //   megabytes)
    // - Binary SI units: "Ki", "Mi", "Gi", "Ti", "Pi", "Ei" (e.g., "512Mi" for
    // 512 mebibytes) If no unit is specified, the value is interpreted as
    // bytes.
    //
    // More info: https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/
    string memory_shares = 1 [
      (google.api.field_behavior) = REQUIRED,
      (buf.validate.field).required = true
    ];
    // cpu_shares is a string specifying the amount of CPU to allocate for the
    // pipeline.
    //
    // This follows the Kubernetes resource quantity format. Acceptable
    // units include:
    // - Decimal SI units: "m" (e.g., "500m" for 500 millicores, "2" for 2 cores)
    // If no unit is specified, the value is interpreted as the number of cores.
    // CPU shares can be specified in millicores (1 core = 1000 millicores).
    //
    // More info: https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/
    string cpu_shares = 2 [
      (google.api.field_behavior) = REQUIRED,
      (buf.validate.field).required = true
    ];
  }

  enum State {
    STATE_UNSPECIFIED = 0;
    STATE_STARTING = 1;
    STATE_RUNNING = 2;
    STATE_STOPPING = 3;
    STATE_STOPPED = 4;
    STATE_ERROR = 5;
  }

  message Status {
    string error = 2;
  }
}

service PipelineService {
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse) {
    option (google.api.http) = {
      post: "/v1alpha2/redpanda-connect/pipelines"
      body: "pipeline"
      response_body: "pipeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Redpanda Connect pipelines"
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ListPipelinesResponse"}
          }
        }
      }
    };
  }
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/redpanda-connect/pipelines/{id}"
      response_body: "pipeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Redpanda Connect pipeline"
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Pipeline"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Redpanda Connect pipeline not found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {
    option (google.api.http) = {get: "/v1alpha2/redpanda-connect/pipelines"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List Redpanda Connect pipelines"
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.ListPipelinesResponse"}
          }
        }
      }
    };
  }
  rpc UpdatePipeline(UpdatePipelineRequest) returns (UpdatePipelineResponse) {
    option (google.api.http) = {
      put: "/v1alpha2/redpanda-connect/pipelines/{id}"
      body: "pipeline"
      response_body: "pipeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update the configuration of a Redpanda Connect pipeline."
      responses: {
        key: "200"
        value: {
          description: "Updated"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Pipeline"}
          }
        }
      }
    };
  }
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse) {
    option (google.api.http) = {delete: "/v1alpha2/redpanda-connect/pipelines/{id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a Redpanda Connect pipeline"
      responses: {
        key: "204"
        value: {
          description: "Deleted"
          schema: {}
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Redpanda Connect pipeline not found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
  rpc StopPipeline(StopPipelineRequest) returns (StopPipelineResponse) {
    option (google.api.http) = {
      put: "/v1alpha2/redpanda-connect/pipelines/{id}/stop"
      response_body: "pipeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Stops a running Redpanda Connect pipeline."
      responses: {
        key: "200"
        value: {
          description: "Stopped"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Pipeline"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Redpanda Connect pipeline not found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
  rpc StartPipeline(StartPipelineRequest) returns (StartPipelineResponse) {
    option (google.api.http) = {
      put: "/v1alpha2/redpanda-connect/pipelines/{id}/start"
      response_body: "pipeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Starts a stopped Redpanda Connect pipeline."
      responses: {
        key: "200"
        value: {
          description: "Started"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.Pipeline"}
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Redpanda Connect pipeline not found"
          schema: {
            json_schema: {ref: ".google.rpc.Status"}
          }
        }
      }
    };
  }
  rpc GetPipelineServiceConfigSchema(GetPipelineServiceConfigSchemaRequest) returns (GetPipelineServiceConfigSchemaResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/redpanda-connect/config_schema"
      response_body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get Redpanda Connect pipeline service config schema"
      responses: {
        key: "200"
        value: {
          description: "OK"
          schema: {
            json_schema: {ref: ".redpanda.api.dataplane.v1alpha2.GetPipelineServiceConfigSchemaResponse"}
          }
        }
      }
    };
  }
}

message PipelineCreate {
  string display_name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];
  string description = 2 [(buf.validate.field).string.max_len = 256];

  string config_yaml = 3 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
  Pipeline.Resources request = 4;
  Pipeline.Resources limit = 5;
}

message CreatePipelineRequest {
  PipelineCreate pipeline = 1;
}

message CreatePipelineResponse {
  Pipeline pipeline = 1;
}

message GetPipelineRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message GetPipelineResponse {
  Pipeline pipeline = 1;
}

message ListPipelinesRequest {
  Filter filter = 1;
  int32 page_size = 2 [
    (buf.validate.field).int32 = {
      gte: -1
      lte: 1000
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Limit the paginated response to a number of items. Defaults to 100. Use -1 to disable pagination."
      minimum: -1
      maximum: 1000
    }
  ];
  string page_token = 3;

  message Filter {
    string display_name = 1;
  }
}

message ListPipelinesResponse {
  repeated Pipeline pipelines = 1;
  string next_page_token = 2;
}

message PipelineUpdate {
  string display_name = 1 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_ /]+$",
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).string.max_len = 128
  ];
  string description = 2 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).string.max_len = 256
  ];

  string config_yaml = 3;
  Pipeline.Resources request = 4;
  Pipeline.Resources limit = 5;
}

message UpdatePipelineRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
  PipelineUpdate pipeline = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true
  ];
  google.protobuf.FieldMask update_mask = 3;
}

message UpdatePipelineResponse {
  Pipeline pipeline = 1;
}

message DeletePipelineRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message DeletePipelineResponse {}

message StopPipelineRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message StopPipelineResponse {
  Pipeline pipeline = 1;
}

message StartPipelineRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[A-Za-z0-9-_/]+$"
  ];
}

message StartPipelineResponse {
  Pipeline pipeline = 1;
}

message GetPipelineServiceConfigSchemaRequest {
  enum Format {
    FORMAT_UNSPECIFIED = 0;
    FORMAT_JSONSCHEMA = 1;
  }

  Format format = 1;
}

message GetPipelineServiceConfigSchemaResponse {
  string config_schema = 1;
}
